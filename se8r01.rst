                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Wed May  3 10:49:15 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module se8r01
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _SE8R01_Init
                                     14 	.globl _SE8R01_Analog_Init
                                     15 	.globl _SE8R01_Calibration
                                     16 	.globl _rf_switch_bank
                                     17 	.globl _init_io
                                     18 	.globl _InitializeUART
                                     19 	.globl _InitializeI2C
                                     20 	.globl _i2c_read_register
                                     21 	.globl _print_UCHAR_hex
                                     22 	.globl _UARTPrintF
                                     23 	.globl _i2c_set_start_ack
                                     24 	.globl _i2c_send_address
                                     25 	.globl _i2c_send_reg
                                     26 	.globl _i2c_set_stop
                                     27 	.globl _i2c_set_nak
                                     28 	.globl _i2c_read
                                     29 	.globl _delay
                                     30 	.globl _InitializeSystemClock
                                     31 	.globl _InitializeSPI
                                     32 	.globl _read_spi_buf
                                     33 	.globl _write_spi_buf
                                     34 	.globl _read_spi_reg
                                     35 	.globl _write_spi_reg
                                     36 	.globl _write_spi
                                     37 	.globl _delayTenMicro
                                     38 	.globl _memset
                                     39 	.globl _tx_buf
                                     40 	.globl _rx_buf
                                     41 	.globl _ADDRESS0
                                     42 	.globl _ADDRESS1
                                     43 	.globl _ADDRESS5
                                     44 	.globl _ADDRESS4
                                     45 	.globl _ADDRESS3
                                     46 	.globl _ADDRESS2
                                     47 	.globl _status
                                     48 	.globl _pip
                                     49 	.globl _signal_lv
                                     50 	.globl _newdata
                                     51 	.globl _pload_width_now
                                     52 	.globl _SE8R01_DR_500K
                                     53 	.globl _SE8R01_DR_1M
                                     54 	.globl _SE8R01_DR_2M
                                     55 	.globl _myData_pip4
                                     56 	.globl _myData_pip5
                                     57 	.globl _gtemp
                                     58 ;--------------------------------------------------------
                                     59 ; ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area DATA
      000001                         62 _gtemp::
      000001                         63 	.ds 5
      000006                         64 _myData_pip5::
      000006                         65 	.ds 5
      00000B                         66 _myData_pip4::
      00000B                         67 	.ds 5
                                     68 ;--------------------------------------------------------
                                     69 ; ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area INITIALIZED
      000010                         72 _SE8R01_DR_2M::
      000010                         73 	.ds 2
      000012                         74 _SE8R01_DR_1M::
      000012                         75 	.ds 2
      000014                         76 _SE8R01_DR_500K::
      000014                         77 	.ds 2
      000016                         78 _pload_width_now::
      000016                         79 	.ds 2
      000018                         80 _newdata::
      000018                         81 	.ds 2
      00001A                         82 _signal_lv::
      00001A                         83 	.ds 1
      00001B                         84 _pip::
      00001B                         85 	.ds 2
      00001D                         86 _status::
      00001D                         87 	.ds 1
      00001E                         88 _ADDRESS2::
      00001E                         89 	.ds 1
      00001F                         90 _ADDRESS3::
      00001F                         91 	.ds 1
      000020                         92 _ADDRESS4::
      000020                         93 	.ds 1
      000021                         94 _ADDRESS5::
      000021                         95 	.ds 1
      000022                         96 _ADDRESS1::
      000022                         97 	.ds 4
      000026                         98 _ADDRESS0::
      000026                         99 	.ds 4
      00002A                        100 _rx_buf::
      00002A                        101 	.ds 32
      00004A                        102 _tx_buf::
      00004A                        103 	.ds 32
                                    104 ;--------------------------------------------------------
                                    105 ; Stack segment in internal ram 
                                    106 ;--------------------------------------------------------
                                    107 	.area	SSEG
      000000                        108 __start__stack:
      000000                        109 	.ds	1
                                    110 
                                    111 ;--------------------------------------------------------
                                    112 ; absolute external ram data
                                    113 ;--------------------------------------------------------
                                    114 	.area DABS (ABS)
                                    115 ;--------------------------------------------------------
                                    116 ; interrupt vector 
                                    117 ;--------------------------------------------------------
                                    118 	.area HOME
      008000                        119 __interrupt_vect:
      008000 82 00 80 83            120 	int s_GSINIT ;reset
      008004 82 00 00 00            121 	int 0x0000 ;trap
      008008 82 00 00 00            122 	int 0x0000 ;int0
      00800C 82 00 00 00            123 	int 0x0000 ;int1
      008010 82 00 00 00            124 	int 0x0000 ;int2
      008014 82 00 00 00            125 	int 0x0000 ;int3
      008018 82 00 00 00            126 	int 0x0000 ;int4
      00801C 82 00 00 00            127 	int 0x0000 ;int5
      008020 82 00 00 00            128 	int 0x0000 ;int6
      008024 82 00 00 00            129 	int 0x0000 ;int7
      008028 82 00 00 00            130 	int 0x0000 ;int8
      00802C 82 00 00 00            131 	int 0x0000 ;int9
      008030 82 00 00 00            132 	int 0x0000 ;int10
      008034 82 00 00 00            133 	int 0x0000 ;int11
      008038 82 00 00 00            134 	int 0x0000 ;int12
      00803C 82 00 00 00            135 	int 0x0000 ;int13
      008040 82 00 00 00            136 	int 0x0000 ;int14
      008044 82 00 00 00            137 	int 0x0000 ;int15
      008048 82 00 00 00            138 	int 0x0000 ;int16
      00804C 82 00 00 00            139 	int 0x0000 ;int17
      008050 82 00 00 00            140 	int 0x0000 ;int18
      008054 82 00 00 00            141 	int 0x0000 ;int19
      008058 82 00 00 00            142 	int 0x0000 ;int20
      00805C 82 00 00 00            143 	int 0x0000 ;int21
      008060 82 00 00 00            144 	int 0x0000 ;int22
      008064 82 00 00 00            145 	int 0x0000 ;int23
      008068 82 00 00 00            146 	int 0x0000 ;int24
      00806C 82 00 00 00            147 	int 0x0000 ;int25
      008070 82 00 00 00            148 	int 0x0000 ;int26
      008074 82 00 00 00            149 	int 0x0000 ;int27
      008078 82 00 00 00            150 	int 0x0000 ;int28
      00807C 82 00 00 00            151 	int 0x0000 ;int29
                                    152 ;--------------------------------------------------------
                                    153 ; global & static initialisations
                                    154 ;--------------------------------------------------------
                                    155 	.area HOME
                                    156 	.area GSINIT
                                    157 	.area GSFINAL
                                    158 	.area GSINIT
      008083                        159 __sdcc_gs_init_startup:
      008083                        160 __sdcc_init_data:
                                    161 ; stm8_genXINIT() start
      008083 AE 00 0F         [ 2]  162 	ldw x, #l_DATA
      008086 27 07            [ 1]  163 	jreq	00002$
      008088                        164 00001$:
      008088 72 4F 00 00      [ 1]  165 	clr (s_DATA - 1, x)
      00808C 5A               [ 2]  166 	decw x
      00808D 26 F9            [ 1]  167 	jrne	00001$
      00808F                        168 00002$:
      00808F AE 00 5A         [ 2]  169 	ldw	x, #l_INITIALIZER
      008092 27 09            [ 1]  170 	jreq	00004$
      008094                        171 00003$:
      008094 D6 8A 4C         [ 1]  172 	ld	a, (s_INITIALIZER - 1, x)
      008097 D7 00 0F         [ 1]  173 	ld	(s_INITIALIZED - 1, x), a
      00809A 5A               [ 2]  174 	decw	x
      00809B 26 F7            [ 1]  175 	jrne	00003$
      00809D                        176 00004$:
                                    177 ; stm8_genXINIT() end
                                    178 	.area GSFINAL
      00809D CC 80 80         [ 2]  179 	jp	__sdcc_program_startup
                                    180 ;--------------------------------------------------------
                                    181 ; Home
                                    182 ;--------------------------------------------------------
                                    183 	.area HOME
                                    184 	.area HOME
      008080                        185 __sdcc_program_startup:
      008080 CC 88 C7         [ 2]  186 	jp	_main
                                    187 ;	return from main will return to caller
                                    188 ;--------------------------------------------------------
                                    189 ; code
                                    190 ;--------------------------------------------------------
                                    191 	.area CODE
                                    192 ;	se8r01.c: 46: void delayTenMicro (void) {
                                    193 ;	-----------------------------------------
                                    194 ;	 function delayTenMicro
                                    195 ;	-----------------------------------------
      0080A0                        196 _delayTenMicro:
                                    197 ;	se8r01.c: 48: for (a = 0; a < 50; ++a)
      0080A0 A6 32            [ 1]  198 	ld	a, #0x32
      0080A2                        199 00104$:
                                    200 ;	se8r01.c: 49: __asm__("nop");
      0080A2 9D               [ 1]  201 	nop
      0080A3 4A               [ 1]  202 	dec	a
                                    203 ;	se8r01.c: 48: for (a = 0; a < 50; ++a)
      0080A4 4D               [ 1]  204 	tnz	a
      0080A5 26 FB            [ 1]  205 	jrne	00104$
      0080A7 81               [ 4]  206 	ret
                                    207 ;	se8r01.c: 51: UCHAR write_spi (UCHAR value) {
                                    208 ;	-----------------------------------------
                                    209 ;	 function write_spi
                                    210 ;	-----------------------------------------
      0080A8                        211 _write_spi:
                                    212 ;	se8r01.c: 53: delayTenMicro ();
      0080A8 CD 80 A0         [ 4]  213 	call	_delayTenMicro
                                    214 ;	se8r01.c: 54: SPI_DR = value;
      0080AB AE 52 04         [ 2]  215 	ldw	x, #0x5204
      0080AE 7B 03            [ 1]  216 	ld	a, (0x03, sp)
      0080B0 F7               [ 1]  217 	ld	(x), a
                                    218 ;	se8r01.c: 55: delayTenMicro ();
      0080B1 CD 80 A0         [ 4]  219 	call	_delayTenMicro
                                    220 ;	se8r01.c: 56: while ((SPI_SR & TXE) == 0);
      0080B4                        221 00101$:
      0080B4 AE 52 03         [ 2]  222 	ldw	x, #0x5203
      0080B7 F6               [ 1]  223 	ld	a, (x)
      0080B8 A5 02            [ 1]  224 	bcp	a, #0x02
      0080BA 27 F8            [ 1]  225 	jreq	00101$
                                    226 ;	se8r01.c: 57: delayTenMicro ();
      0080BC CD 80 A0         [ 4]  227 	call	_delayTenMicro
                                    228 ;	se8r01.c: 58: while ((SPI_SR & RXNE) == 0);
      0080BF                        229 00104$:
      0080BF AE 52 03         [ 2]  230 	ldw	x, #0x5203
      0080C2 F6               [ 1]  231 	ld	a, (x)
      0080C3 44               [ 1]  232 	srl	a
      0080C4 24 F9            [ 1]  233 	jrnc	00104$
                                    234 ;	se8r01.c: 59: delayTenMicro ();
      0080C6 CD 80 A0         [ 4]  235 	call	_delayTenMicro
                                    236 ;	se8r01.c: 60: ret = SPI_DR;
      0080C9 AE 52 04         [ 2]  237 	ldw	x, #0x5204
      0080CC F6               [ 1]  238 	ld	a, (x)
                                    239 ;	se8r01.c: 61: return (ret);
      0080CD 81               [ 4]  240 	ret
                                    241 ;	se8r01.c: 63: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    242 ;	-----------------------------------------
                                    243 ;	 function write_spi_reg
                                    244 ;	-----------------------------------------
      0080CE                        245 _write_spi_reg:
      0080CE 88               [ 1]  246 	push	a
                                    247 ;	se8r01.c: 65: PC_ODR &= ~(1 << CSN);
      0080CF AE 50 0A         [ 2]  248 	ldw	x, #0x500a
      0080D2 F6               [ 1]  249 	ld	a, (x)
      0080D3 A4 F7            [ 1]  250 	and	a, #0xf7
      0080D5 F7               [ 1]  251 	ld	(x), a
                                    252 ;	se8r01.c: 66: ret = write_spi (reg);
      0080D6 7B 04            [ 1]  253 	ld	a, (0x04, sp)
      0080D8 88               [ 1]  254 	push	a
      0080D9 CD 80 A8         [ 4]  255 	call	_write_spi
      0080DC 5B 01            [ 2]  256 	addw	sp, #1
      0080DE 6B 01            [ 1]  257 	ld	(0x01, sp), a
                                    258 ;	se8r01.c: 67: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      0080E0 7B 04            [ 1]  259 	ld	a, (0x04, sp)
      0080E2 A1 FF            [ 1]  260 	cp	a, #0xff
      0080E4 27 15            [ 1]  261 	jreq	00102$
      0080E6 7B 04            [ 1]  262 	ld	a, (0x04, sp)
      0080E8 A1 E2            [ 1]  263 	cp	a, #0xe2
      0080EA 27 0F            [ 1]  264 	jreq	00102$
      0080EC 7B 04            [ 1]  265 	ld	a, (0x04, sp)
      0080EE A1 E1            [ 1]  266 	cp	a, #0xe1
      0080F0 27 09            [ 1]  267 	jreq	00102$
                                    268 ;	se8r01.c: 68: write_spi (value);
      0080F2 7B 05            [ 1]  269 	ld	a, (0x05, sp)
      0080F4 88               [ 1]  270 	push	a
      0080F5 CD 80 A8         [ 4]  271 	call	_write_spi
      0080F8 84               [ 1]  272 	pop	a
      0080F9 20 03            [ 2]  273 	jra	00103$
      0080FB                        274 00102$:
                                    275 ;	se8r01.c: 70: delayTenMicro ();
      0080FB CD 80 A0         [ 4]  276 	call	_delayTenMicro
      0080FE                        277 00103$:
                                    278 ;	se8r01.c: 71: PC_ODR |= (1 << CSN);
      0080FE AE 50 0A         [ 2]  279 	ldw	x, #0x500a
      008101 F6               [ 1]  280 	ld	a, (x)
      008102 AA 08            [ 1]  281 	or	a, #0x08
      008104 F7               [ 1]  282 	ld	(x), a
                                    283 ;	se8r01.c: 72: return (ret);
      008105 7B 01            [ 1]  284 	ld	a, (0x01, sp)
      008107 5B 01            [ 2]  285 	addw	sp, #1
      008109 81               [ 4]  286 	ret
                                    287 ;	se8r01.c: 74: UCHAR read_spi_reg (UCHAR reg) {
                                    288 ;	-----------------------------------------
                                    289 ;	 function read_spi_reg
                                    290 ;	-----------------------------------------
      00810A                        291 _read_spi_reg:
      00810A 88               [ 1]  292 	push	a
                                    293 ;	se8r01.c: 76: PC_ODR &= ~(1 << CSN);
      00810B AE 50 0A         [ 2]  294 	ldw	x, #0x500a
      00810E F6               [ 1]  295 	ld	a, (x)
      00810F A4 F7            [ 1]  296 	and	a, #0xf7
      008111 F7               [ 1]  297 	ld	(x), a
                                    298 ;	se8r01.c: 77: ret = write_spi (reg);
      008112 7B 04            [ 1]  299 	ld	a, (0x04, sp)
      008114 88               [ 1]  300 	push	a
      008115 CD 80 A8         [ 4]  301 	call	_write_spi
      008118 5B 01            [ 2]  302 	addw	sp, #1
      00811A 6B 01            [ 1]  303 	ld	(0x01, sp), a
                                    304 ;	se8r01.c: 78: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00811C 7B 04            [ 1]  305 	ld	a, (0x04, sp)
      00811E A1 FF            [ 1]  306 	cp	a, #0xff
      008120 27 17            [ 1]  307 	jreq	00102$
      008122 7B 04            [ 1]  308 	ld	a, (0x04, sp)
      008124 A1 E2            [ 1]  309 	cp	a, #0xe2
      008126 27 11            [ 1]  310 	jreq	00102$
      008128 7B 04            [ 1]  311 	ld	a, (0x04, sp)
      00812A A1 E1            [ 1]  312 	cp	a, #0xe1
      00812C 27 0B            [ 1]  313 	jreq	00102$
                                    314 ;	se8r01.c: 79: ret = write_spi (NOP);
      00812E 4B FF            [ 1]  315 	push	#0xff
      008130 CD 80 A8         [ 4]  316 	call	_write_spi
      008133 5B 01            [ 2]  317 	addw	sp, #1
      008135 6B 01            [ 1]  318 	ld	(0x01, sp), a
      008137 20 03            [ 2]  319 	jra	00103$
      008139                        320 00102$:
                                    321 ;	se8r01.c: 81: delayTenMicro ();
      008139 CD 80 A0         [ 4]  322 	call	_delayTenMicro
      00813C                        323 00103$:
                                    324 ;	se8r01.c: 82: PC_ODR |= (1 << CSN);
      00813C AE 50 0A         [ 2]  325 	ldw	x, #0x500a
      00813F F6               [ 1]  326 	ld	a, (x)
      008140 AA 08            [ 1]  327 	or	a, #0x08
      008142 F7               [ 1]  328 	ld	(x), a
                                    329 ;	se8r01.c: 83: return (ret);
      008143 7B 01            [ 1]  330 	ld	a, (0x01, sp)
      008145 5B 01            [ 2]  331 	addw	sp, #1
      008147 81               [ 4]  332 	ret
                                    333 ;	se8r01.c: 85: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    334 ;	-----------------------------------------
                                    335 ;	 function write_spi_buf
                                    336 ;	-----------------------------------------
      008148                        337 _write_spi_buf:
      008148 52 02            [ 2]  338 	sub	sp, #2
                                    339 ;	se8r01.c: 87: PC_ODR &= ~(1 << CSN);
      00814A AE 50 0A         [ 2]  340 	ldw	x, #0x500a
      00814D F6               [ 1]  341 	ld	a, (x)
      00814E A4 F7            [ 1]  342 	and	a, #0xf7
      008150 F7               [ 1]  343 	ld	(x), a
                                    344 ;	se8r01.c: 88: ret = write_spi (reg);
      008151 7B 05            [ 1]  345 	ld	a, (0x05, sp)
      008153 88               [ 1]  346 	push	a
      008154 CD 80 A8         [ 4]  347 	call	_write_spi
      008157 5B 01            [ 2]  348 	addw	sp, #1
      008159 6B 02            [ 1]  349 	ld	(0x02, sp), a
                                    350 ;	se8r01.c: 89: for (n = 0; n < len; ++n)
      00815B 0F 01            [ 1]  351 	clr	(0x01, sp)
      00815D                        352 00103$:
      00815D 7B 01            [ 1]  353 	ld	a, (0x01, sp)
      00815F 11 08            [ 1]  354 	cp	a, (0x08, sp)
      008161 24 11            [ 1]  355 	jrnc	00101$
                                    356 ;	se8r01.c: 90: write_spi (array[n]);
      008163 5F               [ 1]  357 	clrw	x
      008164 7B 01            [ 1]  358 	ld	a, (0x01, sp)
      008166 97               [ 1]  359 	ld	xl, a
      008167 72 FB 06         [ 2]  360 	addw	x, (0x06, sp)
      00816A F6               [ 1]  361 	ld	a, (x)
      00816B 88               [ 1]  362 	push	a
      00816C CD 80 A8         [ 4]  363 	call	_write_spi
      00816F 84               [ 1]  364 	pop	a
                                    365 ;	se8r01.c: 89: for (n = 0; n < len; ++n)
      008170 0C 01            [ 1]  366 	inc	(0x01, sp)
      008172 20 E9            [ 2]  367 	jra	00103$
      008174                        368 00101$:
                                    369 ;	se8r01.c: 91: PC_ODR |= (1 << CSN);
      008174 AE 50 0A         [ 2]  370 	ldw	x, #0x500a
      008177 F6               [ 1]  371 	ld	a, (x)
      008178 AA 08            [ 1]  372 	or	a, #0x08
      00817A F7               [ 1]  373 	ld	(x), a
                                    374 ;	se8r01.c: 92: return (ret);
      00817B 7B 02            [ 1]  375 	ld	a, (0x02, sp)
      00817D 5B 02            [ 2]  376 	addw	sp, #2
      00817F 81               [ 4]  377 	ret
                                    378 ;	se8r01.c: 94: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    379 ;	-----------------------------------------
                                    380 ;	 function read_spi_buf
                                    381 ;	-----------------------------------------
      008180                        382 _read_spi_buf:
      008180 52 02            [ 2]  383 	sub	sp, #2
                                    384 ;	se8r01.c: 96: PC_ODR &= ~(1 << CSN);
      008182 AE 50 0A         [ 2]  385 	ldw	x, #0x500a
      008185 F6               [ 1]  386 	ld	a, (x)
      008186 A4 F7            [ 1]  387 	and	a, #0xf7
      008188 F7               [ 1]  388 	ld	(x), a
                                    389 ;	se8r01.c: 97: ret = write_spi (reg);
      008189 7B 05            [ 1]  390 	ld	a, (0x05, sp)
      00818B 88               [ 1]  391 	push	a
      00818C CD 80 A8         [ 4]  392 	call	_write_spi
      00818F 5B 01            [ 2]  393 	addw	sp, #1
      008191 6B 01            [ 1]  394 	ld	(0x01, sp), a
                                    395 ;	se8r01.c: 98: for (n = 0; n < len; ++n)
      008193 0F 02            [ 1]  396 	clr	(0x02, sp)
      008195                        397 00103$:
      008195 7B 02            [ 1]  398 	ld	a, (0x02, sp)
      008197 11 08            [ 1]  399 	cp	a, (0x08, sp)
      008199 24 15            [ 1]  400 	jrnc	00101$
                                    401 ;	se8r01.c: 99: array[n] = write_spi (NOP);
      00819B 5F               [ 1]  402 	clrw	x
      00819C 7B 02            [ 1]  403 	ld	a, (0x02, sp)
      00819E 97               [ 1]  404 	ld	xl, a
      00819F 72 FB 06         [ 2]  405 	addw	x, (0x06, sp)
      0081A2 89               [ 2]  406 	pushw	x
      0081A3 4B FF            [ 1]  407 	push	#0xff
      0081A5 CD 80 A8         [ 4]  408 	call	_write_spi
      0081A8 5B 01            [ 2]  409 	addw	sp, #1
      0081AA 85               [ 2]  410 	popw	x
      0081AB F7               [ 1]  411 	ld	(x), a
                                    412 ;	se8r01.c: 98: for (n = 0; n < len; ++n)
      0081AC 0C 02            [ 1]  413 	inc	(0x02, sp)
      0081AE 20 E5            [ 2]  414 	jra	00103$
      0081B0                        415 00101$:
                                    416 ;	se8r01.c: 100: PC_ODR |= (1 << CSN);
      0081B0 AE 50 0A         [ 2]  417 	ldw	x, #0x500a
      0081B3 F6               [ 1]  418 	ld	a, (x)
      0081B4 AA 08            [ 1]  419 	or	a, #0x08
      0081B6 F7               [ 1]  420 	ld	(x), a
                                    421 ;	se8r01.c: 101: return (ret);
      0081B7 7B 01            [ 1]  422 	ld	a, (0x01, sp)
      0081B9 5B 02            [ 2]  423 	addw	sp, #2
      0081BB 81               [ 4]  424 	ret
                                    425 ;	se8r01.c: 103: void InitializeSPI () {
                                    426 ;	-----------------------------------------
                                    427 ;	 function InitializeSPI
                                    428 ;	-----------------------------------------
      0081BC                        429 _InitializeSPI:
                                    430 ;	se8r01.c: 104: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      0081BC AE 52 00         [ 2]  431 	ldw	x, #0x5200
      0081BF A6 7C            [ 1]  432 	ld	a, #0x7c
      0081C1 F7               [ 1]  433 	ld	(x), a
                                    434 ;	se8r01.c: 105: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      0081C2 AE 52 01         [ 2]  435 	ldw	x, #0x5201
      0081C5 7F               [ 1]  436 	clr	(x)
                                    437 ;	se8r01.c: 106: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      0081C6 AE 52 02         [ 2]  438 	ldw	x, #0x5202
      0081C9 7F               [ 1]  439 	clr	(x)
                                    440 ;	se8r01.c: 107: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      0081CA AE 50 0C         [ 2]  441 	ldw	x, #0x500c
      0081CD A6 18            [ 1]  442 	ld	a, #0x18
      0081CF F7               [ 1]  443 	ld	(x), a
                                    444 ;	se8r01.c: 108: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      0081D0 AE 50 0D         [ 2]  445 	ldw	x, #0x500d
      0081D3 A6 18            [ 1]  446 	ld	a, #0x18
      0081D5 F7               [ 1]  447 	ld	(x), a
                                    448 ;	se8r01.c: 109: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      0081D6 AE 50 0E         [ 2]  449 	ldw	x, #0x500e
      0081D9 A6 18            [ 1]  450 	ld	a, #0x18
      0081DB F7               [ 1]  451 	ld	(x), a
                                    452 ;	se8r01.c: 111: PC_ODR &= ~(1 << CE);
      0081DC AE 50 0A         [ 2]  453 	ldw	x, #0x500a
      0081DF F6               [ 1]  454 	ld	a, (x)
      0081E0 A4 EF            [ 1]  455 	and	a, #0xef
      0081E2 F7               [ 1]  456 	ld	(x), a
      0081E3 81               [ 4]  457 	ret
                                    458 ;	se8r01.c: 113: void InitializeSystemClock() {
                                    459 ;	-----------------------------------------
                                    460 ;	 function InitializeSystemClock
                                    461 ;	-----------------------------------------
      0081E4                        462 _InitializeSystemClock:
                                    463 ;	se8r01.c: 114: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      0081E4 AE 50 C0         [ 2]  464 	ldw	x, #0x50c0
      0081E7 7F               [ 1]  465 	clr	(x)
                                    466 ;	se8r01.c: 115: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      0081E8 AE 50 C0         [ 2]  467 	ldw	x, #0x50c0
      0081EB A6 01            [ 1]  468 	ld	a, #0x01
      0081ED F7               [ 1]  469 	ld	(x), a
                                    470 ;	se8r01.c: 116: CLK_ECKR = 0;                       //  Disable the external clock.
      0081EE AE 50 C1         [ 2]  471 	ldw	x, #0x50c1
      0081F1 7F               [ 1]  472 	clr	(x)
                                    473 ;	se8r01.c: 117: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      0081F2                        474 00101$:
      0081F2 AE 50 C0         [ 2]  475 	ldw	x, #0x50c0
      0081F5 F6               [ 1]  476 	ld	a, (x)
      0081F6 A5 02            [ 1]  477 	bcp	a, #0x02
      0081F8 27 F8            [ 1]  478 	jreq	00101$
                                    479 ;	se8r01.c: 118: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      0081FA AE 50 C6         [ 2]  480 	ldw	x, #0x50c6
      0081FD 7F               [ 1]  481 	clr	(x)
                                    482 ;	se8r01.c: 119: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      0081FE AE 50 C7         [ 2]  483 	ldw	x, #0x50c7
      008201 A6 FF            [ 1]  484 	ld	a, #0xff
      008203 F7               [ 1]  485 	ld	(x), a
                                    486 ;	se8r01.c: 120: CLK_PCKENR2 = 0xff;                 //  Ditto.
      008204 AE 50 CA         [ 2]  487 	ldw	x, #0x50ca
      008207 A6 FF            [ 1]  488 	ld	a, #0xff
      008209 F7               [ 1]  489 	ld	(x), a
                                    490 ;	se8r01.c: 121: CLK_CCOR = 0;                       //  Turn off CCO.
      00820A AE 50 C9         [ 2]  491 	ldw	x, #0x50c9
      00820D 7F               [ 1]  492 	clr	(x)
                                    493 ;	se8r01.c: 122: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00820E AE 50 CC         [ 2]  494 	ldw	x, #0x50cc
      008211 7F               [ 1]  495 	clr	(x)
                                    496 ;	se8r01.c: 123: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      008212 AE 50 CD         [ 2]  497 	ldw	x, #0x50cd
      008215 7F               [ 1]  498 	clr	(x)
                                    499 ;	se8r01.c: 124: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      008216 AE 50 C4         [ 2]  500 	ldw	x, #0x50c4
      008219 A6 E1            [ 1]  501 	ld	a, #0xe1
      00821B F7               [ 1]  502 	ld	(x), a
                                    503 ;	se8r01.c: 125: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00821C AE 50 C5         [ 2]  504 	ldw	x, #0x50c5
      00821F 7F               [ 1]  505 	clr	(x)
                                    506 ;	se8r01.c: 126: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      008220 AE 50 C5         [ 2]  507 	ldw	x, #0x50c5
      008223 A6 02            [ 1]  508 	ld	a, #0x02
      008225 F7               [ 1]  509 	ld	(x), a
                                    510 ;	se8r01.c: 127: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      008226                        511 00104$:
      008226 AE 50 C5         [ 2]  512 	ldw	x, #0x50c5
      008229 F6               [ 1]  513 	ld	a, (x)
      00822A 44               [ 1]  514 	srl	a
      00822B 25 F9            [ 1]  515 	jrc	00104$
      00822D 81               [ 4]  516 	ret
                                    517 ;	se8r01.c: 129: void delay (int time_ms) {
                                    518 ;	-----------------------------------------
                                    519 ;	 function delay
                                    520 ;	-----------------------------------------
      00822E                        521 _delay:
      00822E 52 0A            [ 2]  522 	sub	sp, #10
                                    523 ;	se8r01.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      008230 5F               [ 1]  524 	clrw	x
      008231 1F 03            [ 2]  525 	ldw	(0x03, sp), x
      008233 1F 01            [ 2]  526 	ldw	(0x01, sp), x
      008235 1E 0D            [ 2]  527 	ldw	x, (0x0d, sp)
      008237 89               [ 2]  528 	pushw	x
      008238 4B 0C            [ 1]  529 	push	#0x0c
      00823A 4B 04            [ 1]  530 	push	#0x04
      00823C CD 89 D8         [ 4]  531 	call	__mulint
      00823F 5B 04            [ 2]  532 	addw	sp, #4
      008241 1F 05            [ 2]  533 	ldw	(0x05, sp), x
      008243                        534 00103$:
      008243 16 05            [ 2]  535 	ldw	y, (0x05, sp)
      008245 17 09            [ 2]  536 	ldw	(0x09, sp), y
      008247 7B 09            [ 1]  537 	ld	a, (0x09, sp)
      008249 49               [ 1]  538 	rlc	a
      00824A 4F               [ 1]  539 	clr	a
      00824B A2 00            [ 1]  540 	sbc	a, #0x00
      00824D 6B 08            [ 1]  541 	ld	(0x08, sp), a
      00824F 6B 07            [ 1]  542 	ld	(0x07, sp), a
      008251 1E 03            [ 2]  543 	ldw	x, (0x03, sp)
      008253 13 09            [ 2]  544 	cpw	x, (0x09, sp)
      008255 7B 02            [ 1]  545 	ld	a, (0x02, sp)
      008257 12 08            [ 1]  546 	sbc	a, (0x08, sp)
      008259 7B 01            [ 1]  547 	ld	a, (0x01, sp)
      00825B 12 07            [ 1]  548 	sbc	a, (0x07, sp)
      00825D 2E 17            [ 1]  549 	jrsge	00105$
                                    550 ;	se8r01.c: 132: __asm__("nop");
      00825F 9D               [ 1]  551 	nop
                                    552 ;	se8r01.c: 131: for (x = 0; x < 1036*time_ms; ++x)
      008260 16 03            [ 2]  553 	ldw	y, (0x03, sp)
      008262 72 A9 00 01      [ 2]  554 	addw	y, #0x0001
      008266 7B 02            [ 1]  555 	ld	a, (0x02, sp)
      008268 A9 00            [ 1]  556 	adc	a, #0x00
      00826A 97               [ 1]  557 	ld	xl, a
      00826B 7B 01            [ 1]  558 	ld	a, (0x01, sp)
      00826D A9 00            [ 1]  559 	adc	a, #0x00
      00826F 95               [ 1]  560 	ld	xh, a
      008270 17 03            [ 2]  561 	ldw	(0x03, sp), y
      008272 1F 01            [ 2]  562 	ldw	(0x01, sp), x
      008274 20 CD            [ 2]  563 	jra	00103$
      008276                        564 00105$:
      008276 5B 0A            [ 2]  565 	addw	sp, #10
      008278 81               [ 4]  566 	ret
                                    567 ;	se8r01.c: 134: void i2c_read (unsigned char *x) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function i2c_read
                                    570 ;	-----------------------------------------
      008279                        571 _i2c_read:
                                    572 ;	se8r01.c: 135: while ((I2C_SR1 & I2C_RXNE) == 0);
      008279                        573 00101$:
      008279 AE 52 17         [ 2]  574 	ldw	x, #0x5217
      00827C F6               [ 1]  575 	ld	a, (x)
      00827D A5 40            [ 1]  576 	bcp	a, #0x40
      00827F 27 F8            [ 1]  577 	jreq	00101$
                                    578 ;	se8r01.c: 136: *x = I2C_DR;
      008281 16 03            [ 2]  579 	ldw	y, (0x03, sp)
      008283 AE 52 16         [ 2]  580 	ldw	x, #0x5216
      008286 F6               [ 1]  581 	ld	a, (x)
      008287 90 F7            [ 1]  582 	ld	(y), a
      008289 81               [ 4]  583 	ret
                                    584 ;	se8r01.c: 138: void i2c_set_nak (void) {
                                    585 ;	-----------------------------------------
                                    586 ;	 function i2c_set_nak
                                    587 ;	-----------------------------------------
      00828A                        588 _i2c_set_nak:
                                    589 ;	se8r01.c: 139: I2C_CR2 &= ~I2C_ACK;
      00828A AE 52 11         [ 2]  590 	ldw	x, #0x5211
      00828D F6               [ 1]  591 	ld	a, (x)
      00828E A4 FB            [ 1]  592 	and	a, #0xfb
      008290 F7               [ 1]  593 	ld	(x), a
      008291 81               [ 4]  594 	ret
                                    595 ;	se8r01.c: 141: void i2c_set_stop (void) {
                                    596 ;	-----------------------------------------
                                    597 ;	 function i2c_set_stop
                                    598 ;	-----------------------------------------
      008292                        599 _i2c_set_stop:
                                    600 ;	se8r01.c: 142: I2C_CR2 |= I2C_STOP;
      008292 AE 52 11         [ 2]  601 	ldw	x, #0x5211
      008295 F6               [ 1]  602 	ld	a, (x)
      008296 AA 02            [ 1]  603 	or	a, #0x02
      008298 F7               [ 1]  604 	ld	(x), a
      008299 81               [ 4]  605 	ret
                                    606 ;	se8r01.c: 144: void i2c_send_reg (UCHAR addr) {
                                    607 ;	-----------------------------------------
                                    608 ;	 function i2c_send_reg
                                    609 ;	-----------------------------------------
      00829A                        610 _i2c_send_reg:
      00829A 52 02            [ 2]  611 	sub	sp, #2
                                    612 ;	se8r01.c: 146: reg = I2C_SR1;
      00829C AE 52 17         [ 2]  613 	ldw	x, #0x5217
      00829F F6               [ 1]  614 	ld	a, (x)
      0082A0 5F               [ 1]  615 	clrw	x
      0082A1 97               [ 1]  616 	ld	xl, a
      0082A2 1F 01            [ 2]  617 	ldw	(0x01, sp), x
                                    618 ;	se8r01.c: 147: reg = I2C_SR3;
      0082A4 AE 52 19         [ 2]  619 	ldw	x, #0x5219
      0082A7 F6               [ 1]  620 	ld	a, (x)
      0082A8 5F               [ 1]  621 	clrw	x
      0082A9 97               [ 1]  622 	ld	xl, a
      0082AA 1F 01            [ 2]  623 	ldw	(0x01, sp), x
                                    624 ;	se8r01.c: 148: I2C_DR = addr;
      0082AC AE 52 16         [ 2]  625 	ldw	x, #0x5216
      0082AF 7B 05            [ 1]  626 	ld	a, (0x05, sp)
      0082B1 F7               [ 1]  627 	ld	(x), a
                                    628 ;	se8r01.c: 149: while ((I2C_SR1 & I2C_TXE) == 0);
      0082B2                        629 00101$:
      0082B2 AE 52 17         [ 2]  630 	ldw	x, #0x5217
      0082B5 F6               [ 1]  631 	ld	a, (x)
      0082B6 48               [ 1]  632 	sll	a
      0082B7 24 F9            [ 1]  633 	jrnc	00101$
      0082B9 5B 02            [ 2]  634 	addw	sp, #2
      0082BB 81               [ 4]  635 	ret
                                    636 ;	se8r01.c: 151: void i2c_send_address (UCHAR addr, UCHAR mode) {
                                    637 ;	-----------------------------------------
                                    638 ;	 function i2c_send_address
                                    639 ;	-----------------------------------------
      0082BC                        640 _i2c_send_address:
      0082BC 52 03            [ 2]  641 	sub	sp, #3
                                    642 ;	se8r01.c: 153: reg = I2C_SR1;
      0082BE AE 52 17         [ 2]  643 	ldw	x, #0x5217
      0082C1 F6               [ 1]  644 	ld	a, (x)
      0082C2 5F               [ 1]  645 	clrw	x
      0082C3 97               [ 1]  646 	ld	xl, a
      0082C4 1F 01            [ 2]  647 	ldw	(0x01, sp), x
                                    648 ;	se8r01.c: 154: I2C_DR = (addr << 1) | mode;
      0082C6 7B 06            [ 1]  649 	ld	a, (0x06, sp)
      0082C8 48               [ 1]  650 	sll	a
      0082C9 1A 07            [ 1]  651 	or	a, (0x07, sp)
      0082CB AE 52 16         [ 2]  652 	ldw	x, #0x5216
      0082CE F7               [ 1]  653 	ld	(x), a
                                    654 ;	se8r01.c: 155: if (mode == I2C_READ) {
      0082CF 7B 07            [ 1]  655 	ld	a, (0x07, sp)
      0082D1 A1 01            [ 1]  656 	cp	a, #0x01
      0082D3 26 06            [ 1]  657 	jrne	00127$
      0082D5 A6 01            [ 1]  658 	ld	a, #0x01
      0082D7 6B 03            [ 1]  659 	ld	(0x03, sp), a
      0082D9 20 02            [ 2]  660 	jra	00128$
      0082DB                        661 00127$:
      0082DB 0F 03            [ 1]  662 	clr	(0x03, sp)
      0082DD                        663 00128$:
      0082DD 0D 03            [ 1]  664 	tnz	(0x03, sp)
      0082DF 27 08            [ 1]  665 	jreq	00103$
                                    666 ;	se8r01.c: 156: I2C_OARL = 0;
      0082E1 AE 52 13         [ 2]  667 	ldw	x, #0x5213
      0082E4 7F               [ 1]  668 	clr	(x)
                                    669 ;	se8r01.c: 157: I2C_OARH = 0;
      0082E5 AE 52 14         [ 2]  670 	ldw	x, #0x5214
      0082E8 7F               [ 1]  671 	clr	(x)
                                    672 ;	se8r01.c: 159: while ((I2C_SR1 & I2C_ADDR) == 0);
      0082E9                        673 00103$:
                                    674 ;	se8r01.c: 153: reg = I2C_SR1;
      0082E9 AE 52 17         [ 2]  675 	ldw	x, #0x5217
      0082EC F6               [ 1]  676 	ld	a, (x)
                                    677 ;	se8r01.c: 159: while ((I2C_SR1 & I2C_ADDR) == 0);
      0082ED A5 02            [ 1]  678 	bcp	a, #0x02
      0082EF 27 F8            [ 1]  679 	jreq	00103$
                                    680 ;	se8r01.c: 160: if (mode == I2C_READ)
      0082F1 0D 03            [ 1]  681 	tnz	(0x03, sp)
      0082F3 27 06            [ 1]  682 	jreq	00108$
                                    683 ;	se8r01.c: 161: UNSET (I2C_SR1, I2C_ADDR);
      0082F5 A4 FD            [ 1]  684 	and	a, #0xfd
      0082F7 AE 52 17         [ 2]  685 	ldw	x, #0x5217
      0082FA F7               [ 1]  686 	ld	(x), a
      0082FB                        687 00108$:
      0082FB 5B 03            [ 2]  688 	addw	sp, #3
      0082FD 81               [ 4]  689 	ret
                                    690 ;	se8r01.c: 163: void i2c_set_start_ack (void) {
                                    691 ;	-----------------------------------------
                                    692 ;	 function i2c_set_start_ack
                                    693 ;	-----------------------------------------
      0082FE                        694 _i2c_set_start_ack:
                                    695 ;	se8r01.c: 164: I2C_CR2 = I2C_ACK | I2C_START;
      0082FE AE 52 11         [ 2]  696 	ldw	x, #0x5211
      008301 A6 05            [ 1]  697 	ld	a, #0x05
      008303 F7               [ 1]  698 	ld	(x), a
                                    699 ;	se8r01.c: 165: while ((I2C_SR1 & I2C_SB) == 0);
      008304                        700 00101$:
      008304 AE 52 17         [ 2]  701 	ldw	x, #0x5217
      008307 F6               [ 1]  702 	ld	a, (x)
      008308 44               [ 1]  703 	srl	a
      008309 24 F9            [ 1]  704 	jrnc	00101$
      00830B 81               [ 4]  705 	ret
                                    706 ;	se8r01.c: 170: void UARTPrintF (char *message) {
                                    707 ;	-----------------------------------------
                                    708 ;	 function UARTPrintF
                                    709 ;	-----------------------------------------
      00830C                        710 _UARTPrintF:
                                    711 ;	se8r01.c: 171: char *ch = message;
      00830C 16 03            [ 2]  712 	ldw	y, (0x03, sp)
                                    713 ;	se8r01.c: 172: while (*ch) {
      00830E                        714 00104$:
      00830E 90 F6            [ 1]  715 	ld	a, (y)
      008310 4D               [ 1]  716 	tnz	a
      008311 27 0F            [ 1]  717 	jreq	00107$
                                    718 ;	se8r01.c: 173: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      008313 AE 52 31         [ 2]  719 	ldw	x, #0x5231
      008316 F7               [ 1]  720 	ld	(x), a
                                    721 ;	se8r01.c: 174: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      008317                        722 00101$:
      008317 AE 52 30         [ 2]  723 	ldw	x, #0x5230
      00831A F6               [ 1]  724 	ld	a, (x)
      00831B 48               [ 1]  725 	sll	a
      00831C 24 F9            [ 1]  726 	jrnc	00101$
                                    727 ;	se8r01.c: 175: ch++;                               //  Grab the next character.
      00831E 90 5C            [ 2]  728 	incw	y
      008320 20 EC            [ 2]  729 	jra	00104$
      008322                        730 00107$:
      008322 81               [ 4]  731 	ret
                                    732 ;	se8r01.c: 178: void print_UCHAR_hex (unsigned char buffer) {
                                    733 ;	-----------------------------------------
                                    734 ;	 function print_UCHAR_hex
                                    735 ;	-----------------------------------------
      008323                        736 _print_UCHAR_hex:
      008323 52 0C            [ 2]  737 	sub	sp, #12
                                    738 ;	se8r01.c: 181: a = (buffer >> 4);
      008325 7B 0F            [ 1]  739 	ld	a, (0x0f, sp)
      008327 4E               [ 1]  740 	swap	a
      008328 A4 0F            [ 1]  741 	and	a, #0x0f
      00832A 5F               [ 1]  742 	clrw	x
      00832B 97               [ 1]  743 	ld	xl, a
                                    744 ;	se8r01.c: 182: if (a > 9)
      00832C A3 00 09         [ 2]  745 	cpw	x, #0x0009
      00832F 2D 07            [ 1]  746 	jrsle	00102$
                                    747 ;	se8r01.c: 183: a = a + 'a' - 10;
      008331 1C 00 57         [ 2]  748 	addw	x, #0x0057
      008334 1F 0B            [ 2]  749 	ldw	(0x0b, sp), x
      008336 20 05            [ 2]  750 	jra	00103$
      008338                        751 00102$:
                                    752 ;	se8r01.c: 185: a += '0'; 
      008338 1C 00 30         [ 2]  753 	addw	x, #0x0030
      00833B 1F 0B            [ 2]  754 	ldw	(0x0b, sp), x
      00833D                        755 00103$:
                                    756 ;	se8r01.c: 186: b = buffer & 0x0f;
      00833D 7B 0F            [ 1]  757 	ld	a, (0x0f, sp)
      00833F A4 0F            [ 1]  758 	and	a, #0x0f
      008341 5F               [ 1]  759 	clrw	x
      008342 97               [ 1]  760 	ld	xl, a
                                    761 ;	se8r01.c: 187: if (b > 9)
      008343 A3 00 09         [ 2]  762 	cpw	x, #0x0009
      008346 2D 07            [ 1]  763 	jrsle	00105$
                                    764 ;	se8r01.c: 188: b = b + 'a' - 10;
      008348 1C 00 57         [ 2]  765 	addw	x, #0x0057
      00834B 1F 09            [ 2]  766 	ldw	(0x09, sp), x
      00834D 20 05            [ 2]  767 	jra	00106$
      00834F                        768 00105$:
                                    769 ;	se8r01.c: 190: b += '0'; 
      00834F 1C 00 30         [ 2]  770 	addw	x, #0x0030
      008352 1F 09            [ 2]  771 	ldw	(0x09, sp), x
      008354                        772 00106$:
                                    773 ;	se8r01.c: 191: message[0] = a;
      008354 90 96            [ 1]  774 	ldw	y, sp
      008356 90 5C            [ 2]  775 	incw	y
      008358 7B 0C            [ 1]  776 	ld	a, (0x0c, sp)
      00835A 90 F7            [ 1]  777 	ld	(y), a
                                    778 ;	se8r01.c: 192: message[1] = b;
      00835C 93               [ 1]  779 	ldw	x, y
      00835D 5C               [ 2]  780 	incw	x
      00835E 7B 0A            [ 1]  781 	ld	a, (0x0a, sp)
      008360 F7               [ 1]  782 	ld	(x), a
                                    783 ;	se8r01.c: 193: message[2] = 0;
      008361 93               [ 1]  784 	ldw	x, y
      008362 5C               [ 2]  785 	incw	x
      008363 5C               [ 2]  786 	incw	x
      008364 7F               [ 1]  787 	clr	(x)
                                    788 ;	se8r01.c: 194: UARTPrintF (message);
      008365 90 89            [ 2]  789 	pushw	y
      008367 CD 83 0C         [ 4]  790 	call	_UARTPrintF
      00836A 5B 02            [ 2]  791 	addw	sp, #2
      00836C 5B 0C            [ 2]  792 	addw	sp, #12
      00836E 81               [ 4]  793 	ret
                                    794 ;	se8r01.c: 196: unsigned char i2c_read_register (UCHAR addr, UCHAR rg) {
                                    795 ;	-----------------------------------------
                                    796 ;	 function i2c_read_register
                                    797 ;	-----------------------------------------
      00836F                        798 _i2c_read_register:
      00836F 52 02            [ 2]  799 	sub	sp, #2
                                    800 ;	se8r01.c: 199: i2c_set_start_ack ();
      008371 CD 82 FE         [ 4]  801 	call	_i2c_set_start_ack
                                    802 ;	se8r01.c: 200: i2c_send_address (addr, I2C_WRITE);
      008374 4B 00            [ 1]  803 	push	#0x00
      008376 7B 06            [ 1]  804 	ld	a, (0x06, sp)
      008378 88               [ 1]  805 	push	a
      008379 CD 82 BC         [ 4]  806 	call	_i2c_send_address
      00837C 5B 02            [ 2]  807 	addw	sp, #2
                                    808 ;	se8r01.c: 201: i2c_send_reg (rg);
      00837E 7B 06            [ 1]  809 	ld	a, (0x06, sp)
      008380 88               [ 1]  810 	push	a
      008381 CD 82 9A         [ 4]  811 	call	_i2c_send_reg
      008384 84               [ 1]  812 	pop	a
                                    813 ;	se8r01.c: 202: i2c_set_start_ack ();
      008385 CD 82 FE         [ 4]  814 	call	_i2c_set_start_ack
                                    815 ;	se8r01.c: 203: i2c_send_address (addr, I2C_READ);
      008388 4B 01            [ 1]  816 	push	#0x01
      00838A 7B 06            [ 1]  817 	ld	a, (0x06, sp)
      00838C 88               [ 1]  818 	push	a
      00838D CD 82 BC         [ 4]  819 	call	_i2c_send_address
      008390 5B 02            [ 2]  820 	addw	sp, #2
                                    821 ;	se8r01.c: 204: reg = I2C_SR1;
      008392 AE 52 17         [ 2]  822 	ldw	x, #0x5217
      008395 F6               [ 1]  823 	ld	a, (x)
      008396 6B 02            [ 1]  824 	ld	(0x02, sp), a
                                    825 ;	se8r01.c: 205: reg = I2C_SR3;
      008398 AE 52 19         [ 2]  826 	ldw	x, #0x5219
      00839B F6               [ 1]  827 	ld	a, (x)
      00839C 6B 02            [ 1]  828 	ld	(0x02, sp), a
                                    829 ;	se8r01.c: 206: i2c_set_nak ();
      00839E CD 82 8A         [ 4]  830 	call	_i2c_set_nak
                                    831 ;	se8r01.c: 207: i2c_set_stop ();
      0083A1 CD 82 92         [ 4]  832 	call	_i2c_set_stop
                                    833 ;	se8r01.c: 208: i2c_read (&x);
      0083A4 96               [ 1]  834 	ldw	x, sp
      0083A5 5C               [ 2]  835 	incw	x
      0083A6 89               [ 2]  836 	pushw	x
      0083A7 CD 82 79         [ 4]  837 	call	_i2c_read
      0083AA 5B 02            [ 2]  838 	addw	sp, #2
                                    839 ;	se8r01.c: 209: return (x);
      0083AC 7B 01            [ 1]  840 	ld	a, (0x01, sp)
      0083AE 5B 02            [ 2]  841 	addw	sp, #2
      0083B0 81               [ 4]  842 	ret
                                    843 ;	se8r01.c: 212: void InitializeI2C (void) {
                                    844 ;	-----------------------------------------
                                    845 ;	 function InitializeI2C
                                    846 ;	-----------------------------------------
      0083B1                        847 _InitializeI2C:
                                    848 ;	se8r01.c: 213: I2C_CR1 = 0;   //  Disable I2C before configuration starts. PE bit is bit 0
      0083B1 AE 52 10         [ 2]  849 	ldw	x, #0x5210
      0083B4 7F               [ 1]  850 	clr	(x)
                                    851 ;	se8r01.c: 217: I2C_FREQR = 16;                     //  Set the internal clock frequency (MHz).
      0083B5 AE 52 12         [ 2]  852 	ldw	x, #0x5212
      0083B8 A6 10            [ 1]  853 	ld	a, #0x10
      0083BA F7               [ 1]  854 	ld	(x), a
                                    855 ;	se8r01.c: 218: UNSET (I2C_CCRH, I2C_FS);           //  I2C running is standard mode.
      0083BB 72 17 52 1C      [ 1]  856 	bres	0x521c, #7
                                    857 ;	se8r01.c: 219: I2C_CCRL = 0x10;                    //  SCL clock speed is 500 kHz.
      0083BF AE 52 1B         [ 2]  858 	ldw	x, #0x521b
      0083C2 A6 10            [ 1]  859 	ld	a, #0x10
      0083C4 F7               [ 1]  860 	ld	(x), a
                                    861 ;	se8r01.c: 220: I2C_CCRH &= 0xf0;	// Clears lower 4 bits "CCR"
      0083C5 AE 52 1C         [ 2]  862 	ldw	x, #0x521c
      0083C8 F6               [ 1]  863 	ld	a, (x)
      0083C9 A4 F0            [ 1]  864 	and	a, #0xf0
      0083CB F7               [ 1]  865 	ld	(x), a
                                    866 ;	se8r01.c: 224: UNSET (I2C_OARH, I2C_ADDMODE);      //  7 bit address mode.
      0083CC 72 17 52 14      [ 1]  867 	bres	0x5214, #7
                                    868 ;	se8r01.c: 225: SET (I2C_OARH, I2C_ADDCONF);        //  Docs say this must always be 1.
      0083D0 AE 52 14         [ 2]  869 	ldw	x, #0x5214
      0083D3 F6               [ 1]  870 	ld	a, (x)
      0083D4 AA 40            [ 1]  871 	or	a, #0x40
      0083D6 F7               [ 1]  872 	ld	(x), a
                                    873 ;	se8r01.c: 229: I2C_TRISER = 17;
      0083D7 AE 52 1D         [ 2]  874 	ldw	x, #0x521d
      0083DA A6 11            [ 1]  875 	ld	a, #0x11
      0083DC F7               [ 1]  876 	ld	(x), a
                                    877 ;	se8r01.c: 237: I2C_CR1 = I2C_PE;	// Enables port
      0083DD AE 52 10         [ 2]  878 	ldw	x, #0x5210
      0083E0 A6 01            [ 1]  879 	ld	a, #0x01
      0083E2 F7               [ 1]  880 	ld	(x), a
      0083E3 81               [ 4]  881 	ret
                                    882 ;	se8r01.c: 243: void InitializeUART() {
                                    883 ;	-----------------------------------------
                                    884 ;	 function InitializeUART
                                    885 ;	-----------------------------------------
      0083E4                        886 _InitializeUART:
                                    887 ;	se8r01.c: 253: UART1_CR1 = 0;
      0083E4 AE 52 34         [ 2]  888 	ldw	x, #0x5234
      0083E7 7F               [ 1]  889 	clr	(x)
                                    890 ;	se8r01.c: 254: UART1_CR2 = 0;
      0083E8 AE 52 35         [ 2]  891 	ldw	x, #0x5235
      0083EB 7F               [ 1]  892 	clr	(x)
                                    893 ;	se8r01.c: 255: UART1_CR4 = 0;
      0083EC AE 52 37         [ 2]  894 	ldw	x, #0x5237
      0083EF 7F               [ 1]  895 	clr	(x)
                                    896 ;	se8r01.c: 256: UART1_CR3 = 0;
      0083F0 AE 52 36         [ 2]  897 	ldw	x, #0x5236
      0083F3 7F               [ 1]  898 	clr	(x)
                                    899 ;	se8r01.c: 257: UART1_CR5 = 0;
      0083F4 AE 52 38         [ 2]  900 	ldw	x, #0x5238
      0083F7 7F               [ 1]  901 	clr	(x)
                                    902 ;	se8r01.c: 258: UART1_GTR = 0;
      0083F8 AE 52 39         [ 2]  903 	ldw	x, #0x5239
      0083FB 7F               [ 1]  904 	clr	(x)
                                    905 ;	se8r01.c: 259: UART1_PSCR = 0;
      0083FC AE 52 3A         [ 2]  906 	ldw	x, #0x523a
      0083FF 7F               [ 1]  907 	clr	(x)
                                    908 ;	se8r01.c: 263: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      008400 AE 52 34         [ 2]  909 	ldw	x, #0x5234
      008403 F6               [ 1]  910 	ld	a, (x)
      008404 A4 EF            [ 1]  911 	and	a, #0xef
      008406 F7               [ 1]  912 	ld	(x), a
                                    913 ;	se8r01.c: 264: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      008407 AE 52 34         [ 2]  914 	ldw	x, #0x5234
      00840A F6               [ 1]  915 	ld	a, (x)
      00840B A4 FB            [ 1]  916 	and	a, #0xfb
      00840D F7               [ 1]  917 	ld	(x), a
                                    918 ;	se8r01.c: 265: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      00840E AE 52 36         [ 2]  919 	ldw	x, #0x5236
      008411 F6               [ 1]  920 	ld	a, (x)
      008412 A4 DF            [ 1]  921 	and	a, #0xdf
      008414 F7               [ 1]  922 	ld	(x), a
                                    923 ;	se8r01.c: 266: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      008415 AE 52 36         [ 2]  924 	ldw	x, #0x5236
      008418 F6               [ 1]  925 	ld	a, (x)
      008419 A4 EF            [ 1]  926 	and	a, #0xef
      00841B F7               [ 1]  927 	ld	(x), a
                                    928 ;	se8r01.c: 267: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      00841C AE 52 33         [ 2]  929 	ldw	x, #0x5233
      00841F A6 0A            [ 1]  930 	ld	a, #0x0a
      008421 F7               [ 1]  931 	ld	(x), a
                                    932 ;	se8r01.c: 268: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      008422 AE 52 32         [ 2]  933 	ldw	x, #0x5232
      008425 A6 08            [ 1]  934 	ld	a, #0x08
      008427 F7               [ 1]  935 	ld	(x), a
                                    936 ;	se8r01.c: 272: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      008428 AE 52 35         [ 2]  937 	ldw	x, #0x5235
      00842B F6               [ 1]  938 	ld	a, (x)
      00842C A4 F7            [ 1]  939 	and	a, #0xf7
      00842E F7               [ 1]  940 	ld	(x), a
                                    941 ;	se8r01.c: 273: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      00842F AE 52 35         [ 2]  942 	ldw	x, #0x5235
      008432 F6               [ 1]  943 	ld	a, (x)
      008433 A4 FB            [ 1]  944 	and	a, #0xfb
      008435 F7               [ 1]  945 	ld	(x), a
                                    946 ;	se8r01.c: 277: SET (UART1_CR3, CR3_CPOL);
      008436 AE 52 36         [ 2]  947 	ldw	x, #0x5236
      008439 F6               [ 1]  948 	ld	a, (x)
      00843A AA 04            [ 1]  949 	or	a, #0x04
      00843C F7               [ 1]  950 	ld	(x), a
                                    951 ;	se8r01.c: 278: SET (UART1_CR3, CR3_CPHA);
      00843D AE 52 36         [ 2]  952 	ldw	x, #0x5236
      008440 F6               [ 1]  953 	ld	a, (x)
      008441 AA 02            [ 1]  954 	or	a, #0x02
      008443 F7               [ 1]  955 	ld	(x), a
                                    956 ;	se8r01.c: 279: SET (UART1_CR3, CR3_LBCL);
      008444 72 10 52 36      [ 1]  957 	bset	0x5236, #0
                                    958 ;	se8r01.c: 283: SET (UART1_CR2, CR2_TEN);
      008448 AE 52 35         [ 2]  959 	ldw	x, #0x5235
      00844B F6               [ 1]  960 	ld	a, (x)
      00844C AA 08            [ 1]  961 	or	a, #0x08
      00844E F7               [ 1]  962 	ld	(x), a
                                    963 ;	se8r01.c: 284: SET (UART1_CR2, CR2_REN);
      00844F AE 52 35         [ 2]  964 	ldw	x, #0x5235
      008452 F6               [ 1]  965 	ld	a, (x)
      008453 AA 04            [ 1]  966 	or	a, #0x04
      008455 F7               [ 1]  967 	ld	(x), a
                                    968 ;	se8r01.c: 285: UART1_CR3 = CR3_CLKEN;
      008456 AE 52 36         [ 2]  969 	ldw	x, #0x5236
      008459 A6 08            [ 1]  970 	ld	a, #0x08
      00845B F7               [ 1]  971 	ld	(x), a
      00845C 81               [ 4]  972 	ret
                                    973 ;	se8r01.c: 353: void init_io(void)
                                    974 ;	-----------------------------------------
                                    975 ;	 function init_io
                                    976 ;	-----------------------------------------
      00845D                        977 _init_io:
                                    978 ;	se8r01.c: 355: PD_DDR &= ~(1 << 3); // input mode
      00845D AE 50 11         [ 2]  979 	ldw	x, #0x5011
      008460 F6               [ 1]  980 	ld	a, (x)
      008461 A4 F7            [ 1]  981 	and	a, #0xf7
      008463 F7               [ 1]  982 	ld	(x), a
                                    983 ;	se8r01.c: 356: PD_CR1 |= (1 << 3); // input with pull up 
      008464 AE 50 12         [ 2]  984 	ldw	x, #0x5012
      008467 F6               [ 1]  985 	ld	a, (x)
      008468 AA 08            [ 1]  986 	or	a, #0x08
      00846A F7               [ 1]  987 	ld	(x), a
                                    988 ;	se8r01.c: 357: PD_CR2 |= (1 << 3); // interrupt enabled 
      00846B AE 50 13         [ 2]  989 	ldw	x, #0x5013
      00846E F6               [ 1]  990 	ld	a, (x)
      00846F AA 08            [ 1]  991 	or	a, #0x08
      008471 F7               [ 1]  992 	ld	(x), a
                                    993 ;	se8r01.c: 358: PD_ODR &= ~(1 << 3);
      008472 AE 50 0F         [ 2]  994 	ldw	x, #0x500f
      008475 F6               [ 1]  995 	ld	a, (x)
      008476 A4 F7            [ 1]  996 	and	a, #0xf7
      008478 F7               [ 1]  997 	ld	(x), a
                                    998 ;	se8r01.c: 361: PC_ODR &= ~(1 << CE);
      008479 AE 50 0A         [ 2]  999 	ldw	x, #0x500a
      00847C F6               [ 1] 1000 	ld	a, (x)
      00847D A4 EF            [ 1] 1001 	and	a, #0xef
      00847F F7               [ 1] 1002 	ld	(x), a
                                   1003 ;	se8r01.c: 363: PC_ODR |= (1 << CSN);
      008480 AE 50 0A         [ 2] 1004 	ldw	x, #0x500a
      008483 F6               [ 1] 1005 	ld	a, (x)
      008484 AA 08            [ 1] 1006 	or	a, #0x08
      008486 F7               [ 1] 1007 	ld	(x), a
      008487 81               [ 4] 1008 	ret
                                   1009 ;	se8r01.c: 369: void rf_switch_bank(unsigned char bankindex)
                                   1010 ;	-----------------------------------------
                                   1011 ;	 function rf_switch_bank
                                   1012 ;	-----------------------------------------
      008488                       1013 _rf_switch_bank:
      008488 88               [ 1] 1014 	push	a
                                   1015 ;	se8r01.c: 372: temp1 = bankindex;
      008489 7B 04            [ 1] 1016 	ld	a, (0x04, sp)
      00848B 6B 01            [ 1] 1017 	ld	(0x01, sp), a
                                   1018 ;	se8r01.c: 374: temp0 = write_spi(iRF_BANK0_STATUS);
      00848D 4B 07            [ 1] 1019 	push	#0x07
      00848F CD 80 A8         [ 4] 1020 	call	_write_spi
      008492 5B 01            [ 2] 1021 	addw	sp, #1
                                   1022 ;	se8r01.c: 376: if((temp0&0x80)!=temp1)
      008494 A4 80            [ 1] 1023 	and	a, #0x80
      008496 11 01            [ 1] 1024 	cp	a, (0x01, sp)
      008498 27 09            [ 1] 1025 	jreq	00103$
                                   1026 ;	se8r01.c: 378: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      00849A 4B 53            [ 1] 1027 	push	#0x53
      00849C 4B 50            [ 1] 1028 	push	#0x50
      00849E CD 80 CE         [ 4] 1029 	call	_write_spi_reg
      0084A1 5B 02            [ 2] 1030 	addw	sp, #2
      0084A3                       1031 00103$:
      0084A3 84               [ 1] 1032 	pop	a
      0084A4 81               [ 4] 1033 	ret
                                   1034 ;	se8r01.c: 385: void SE8R01_Calibration()
                                   1035 ;	-----------------------------------------
                                   1036 ;	 function SE8R01_Calibration
                                   1037 ;	-----------------------------------------
      0084A5                       1038 _SE8R01_Calibration:
      0084A5 52 0D            [ 2] 1039 	sub	sp, #13
                                   1040 ;	se8r01.c: 388: rf_switch_bank(iBANK0);
      0084A7 4B 00            [ 1] 1041 	push	#0x00
      0084A9 CD 84 88         [ 4] 1042 	call	_rf_switch_bank
      0084AC 84               [ 1] 1043 	pop	a
                                   1044 ;	se8r01.c: 389: temp[0]=0x03;
      0084AD 96               [ 1] 1045 	ldw	x, sp
      0084AE 5C               [ 2] 1046 	incw	x
      0084AF 1F 06            [ 2] 1047 	ldw	(0x06, sp), x
      0084B1 1E 06            [ 2] 1048 	ldw	x, (0x06, sp)
      0084B3 A6 03            [ 1] 1049 	ld	a, #0x03
      0084B5 F7               [ 1] 1050 	ld	(x), a
                                   1051 ;	se8r01.c: 390: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      0084B6 1E 06            [ 2] 1052 	ldw	x, (0x06, sp)
      0084B8 4B 01            [ 1] 1053 	push	#0x01
      0084BA 89               [ 2] 1054 	pushw	x
      0084BB 4B 20            [ 1] 1055 	push	#0x20
      0084BD CD 81 48         [ 4] 1056 	call	_write_spi_buf
      0084C0 5B 04            [ 2] 1057 	addw	sp, #4
                                   1058 ;	se8r01.c: 392: temp[0]=0x32;
      0084C2 1E 06            [ 2] 1059 	ldw	x, (0x06, sp)
      0084C4 A6 32            [ 1] 1060 	ld	a, #0x32
      0084C6 F7               [ 1] 1061 	ld	(x), a
                                   1062 ;	se8r01.c: 394: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      0084C7 1E 06            [ 2] 1063 	ldw	x, (0x06, sp)
      0084C9 4B 01            [ 1] 1064 	push	#0x01
      0084CB 89               [ 2] 1065 	pushw	x
      0084CC 4B 25            [ 1] 1066 	push	#0x25
      0084CE CD 81 48         [ 4] 1067 	call	_write_spi_buf
      0084D1 5B 04            [ 2] 1068 	addw	sp, #4
                                   1069 ;	se8r01.c: 398: if (SE8R01_DR_2M==1)
      0084D3 CE 00 10         [ 2] 1070 	ldw	x, _SE8R01_DR_2M+0
      0084D6 A3 00 01         [ 2] 1071 	cpw	x, #0x0001
      0084D9 26 07            [ 1] 1072 	jrne	00105$
                                   1073 ;	se8r01.c: 399: {temp[0]=0x48;}
      0084DB 1E 06            [ 2] 1074 	ldw	x, (0x06, sp)
      0084DD A6 48            [ 1] 1075 	ld	a, #0x48
      0084DF F7               [ 1] 1076 	ld	(x), a
      0084E0 20 14            [ 2] 1077 	jra	00106$
      0084E2                       1078 00105$:
                                   1079 ;	se8r01.c: 400: else if (SE8R01_DR_1M==1)
      0084E2 CE 00 12         [ 2] 1080 	ldw	x, _SE8R01_DR_1M+0
      0084E5 A3 00 01         [ 2] 1081 	cpw	x, #0x0001
      0084E8 26 07            [ 1] 1082 	jrne	00102$
                                   1083 ;	se8r01.c: 401: {temp[0]=0x40;}
      0084EA 1E 06            [ 2] 1084 	ldw	x, (0x06, sp)
      0084EC A6 40            [ 1] 1085 	ld	a, #0x40
      0084EE F7               [ 1] 1086 	ld	(x), a
      0084EF 20 05            [ 2] 1087 	jra	00106$
      0084F1                       1088 00102$:
                                   1089 ;	se8r01.c: 403: {temp[0]=0x68;}   
      0084F1 1E 06            [ 2] 1090 	ldw	x, (0x06, sp)
      0084F3 A6 68            [ 1] 1091 	ld	a, #0x68
      0084F5 F7               [ 1] 1092 	ld	(x), a
      0084F6                       1093 00106$:
                                   1094 ;	se8r01.c: 405: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      0084F6 1E 06            [ 2] 1095 	ldw	x, (0x06, sp)
      0084F8 4B 01            [ 1] 1096 	push	#0x01
      0084FA 89               [ 2] 1097 	pushw	x
      0084FB 4B 26            [ 1] 1098 	push	#0x26
      0084FD CD 81 48         [ 4] 1099 	call	_write_spi_buf
      008500 5B 04            [ 2] 1100 	addw	sp, #4
                                   1101 ;	se8r01.c: 406: temp[0]=0x77;
      008502 1E 06            [ 2] 1102 	ldw	x, (0x06, sp)
      008504 A6 77            [ 1] 1103 	ld	a, #0x77
      008506 F7               [ 1] 1104 	ld	(x), a
                                   1105 ;	se8r01.c: 407: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      008507 1E 06            [ 2] 1106 	ldw	x, (0x06, sp)
      008509 4B 01            [ 1] 1107 	push	#0x01
      00850B 89               [ 2] 1108 	pushw	x
      00850C 4B 3F            [ 1] 1109 	push	#0x3f
      00850E CD 81 48         [ 4] 1110 	call	_write_spi_buf
      008511 5B 04            [ 2] 1111 	addw	sp, #4
                                   1112 ;	se8r01.c: 409: rf_switch_bank(iBANK1);
      008513 4B 80            [ 1] 1113 	push	#0x80
      008515 CD 84 88         [ 4] 1114 	call	_rf_switch_bank
      008518 84               [ 1] 1115 	pop	a
                                   1116 ;	se8r01.c: 410: temp[0]=0x40;
      008519 1E 06            [ 2] 1117 	ldw	x, (0x06, sp)
      00851B A6 40            [ 1] 1118 	ld	a, #0x40
      00851D F7               [ 1] 1119 	ld	(x), a
                                   1120 ;	se8r01.c: 411: temp[1]=0x00;
      00851E 1E 06            [ 2] 1121 	ldw	x, (0x06, sp)
      008520 5C               [ 2] 1122 	incw	x
      008521 1F 0A            [ 2] 1123 	ldw	(0x0a, sp), x
      008523 1E 0A            [ 2] 1124 	ldw	x, (0x0a, sp)
      008525 7F               [ 1] 1125 	clr	(x)
                                   1126 ;	se8r01.c: 412: temp[2]=0x10;
      008526 1E 06            [ 2] 1127 	ldw	x, (0x06, sp)
      008528 5C               [ 2] 1128 	incw	x
      008529 5C               [ 2] 1129 	incw	x
      00852A 1F 08            [ 2] 1130 	ldw	(0x08, sp), x
      00852C 1E 08            [ 2] 1131 	ldw	x, (0x08, sp)
      00852E A6 10            [ 1] 1132 	ld	a, #0x10
      008530 F7               [ 1] 1133 	ld	(x), a
                                   1134 ;	se8r01.c: 414: {temp[3]=0xE6;}
      008531 1E 06            [ 2] 1135 	ldw	x, (0x06, sp)
      008533 1C 00 03         [ 2] 1136 	addw	x, #0x0003
      008536 1F 0C            [ 2] 1137 	ldw	(0x0c, sp), x
                                   1138 ;	se8r01.c: 413: if (SE8R01_DR_2M==1)
      008538 CE 00 10         [ 2] 1139 	ldw	x, _SE8R01_DR_2M+0
      00853B A3 00 01         [ 2] 1140 	cpw	x, #0x0001
      00853E 26 07            [ 1] 1141 	jrne	00108$
                                   1142 ;	se8r01.c: 414: {temp[3]=0xE6;}
      008540 1E 0C            [ 2] 1143 	ldw	x, (0x0c, sp)
      008542 A6 E6            [ 1] 1144 	ld	a, #0xe6
      008544 F7               [ 1] 1145 	ld	(x), a
      008545 20 05            [ 2] 1146 	jra	00109$
      008547                       1147 00108$:
                                   1148 ;	se8r01.c: 416: {temp[3]=0xE4;}
      008547 1E 0C            [ 2] 1149 	ldw	x, (0x0c, sp)
      008549 A6 E4            [ 1] 1150 	ld	a, #0xe4
      00854B F7               [ 1] 1151 	ld	(x), a
      00854C                       1152 00109$:
                                   1153 ;	se8r01.c: 418: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      00854C 1E 06            [ 2] 1154 	ldw	x, (0x06, sp)
      00854E 4B 04            [ 1] 1155 	push	#0x04
      008550 89               [ 2] 1156 	pushw	x
      008551 4B 21            [ 1] 1157 	push	#0x21
      008553 CD 81 48         [ 4] 1158 	call	_write_spi_buf
      008556 5B 04            [ 2] 1159 	addw	sp, #4
                                   1160 ;	se8r01.c: 420: temp[0]=0x20;
      008558 1E 06            [ 2] 1161 	ldw	x, (0x06, sp)
      00855A A6 20            [ 1] 1162 	ld	a, #0x20
      00855C F7               [ 1] 1163 	ld	(x), a
                                   1164 ;	se8r01.c: 421: temp[1]=0x08;
      00855D 1E 0A            [ 2] 1165 	ldw	x, (0x0a, sp)
      00855F A6 08            [ 1] 1166 	ld	a, #0x08
      008561 F7               [ 1] 1167 	ld	(x), a
                                   1168 ;	se8r01.c: 422: temp[2]=0x50;
      008562 1E 08            [ 2] 1169 	ldw	x, (0x08, sp)
      008564 A6 50            [ 1] 1170 	ld	a, #0x50
      008566 F7               [ 1] 1171 	ld	(x), a
                                   1172 ;	se8r01.c: 423: temp[3]=0x40;
      008567 1E 0C            [ 2] 1173 	ldw	x, (0x0c, sp)
      008569 A6 40            [ 1] 1174 	ld	a, #0x40
      00856B F7               [ 1] 1175 	ld	(x), a
                                   1176 ;	se8r01.c: 424: temp[4]=0x50;
      00856C 1E 06            [ 2] 1177 	ldw	x, (0x06, sp)
      00856E A6 50            [ 1] 1178 	ld	a, #0x50
      008570 E7 04            [ 1] 1179 	ld	(0x0004, x), a
                                   1180 ;	se8r01.c: 425: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      008572 1E 06            [ 2] 1181 	ldw	x, (0x06, sp)
      008574 4B 05            [ 1] 1182 	push	#0x05
      008576 89               [ 2] 1183 	pushw	x
      008577 4B 23            [ 1] 1184 	push	#0x23
      008579 CD 81 48         [ 4] 1185 	call	_write_spi_buf
      00857C 5B 04            [ 2] 1186 	addw	sp, #4
                                   1187 ;	se8r01.c: 427: temp[0]=0x00;
      00857E 1E 06            [ 2] 1188 	ldw	x, (0x06, sp)
      008580 7F               [ 1] 1189 	clr	(x)
                                   1190 ;	se8r01.c: 428: temp[1]=0x00;
      008581 1E 0A            [ 2] 1191 	ldw	x, (0x0a, sp)
      008583 7F               [ 1] 1192 	clr	(x)
                                   1193 ;	se8r01.c: 429: if (SE8R01_DR_2M==1)
      008584 CE 00 10         [ 2] 1194 	ldw	x, _SE8R01_DR_2M+0
      008587 A3 00 01         [ 2] 1195 	cpw	x, #0x0001
      00858A 26 07            [ 1] 1196 	jrne	00111$
                                   1197 ;	se8r01.c: 430: { temp[2]=0x1E;}
      00858C 1E 08            [ 2] 1198 	ldw	x, (0x08, sp)
      00858E A6 1E            [ 1] 1199 	ld	a, #0x1e
      008590 F7               [ 1] 1200 	ld	(x), a
      008591 20 05            [ 2] 1201 	jra	00112$
      008593                       1202 00111$:
                                   1203 ;	se8r01.c: 432: { temp[2]=0x1F;}
      008593 1E 08            [ 2] 1204 	ldw	x, (0x08, sp)
      008595 A6 1F            [ 1] 1205 	ld	a, #0x1f
      008597 F7               [ 1] 1206 	ld	(x), a
      008598                       1207 00112$:
                                   1208 ;	se8r01.c: 434: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      008598 1E 06            [ 2] 1209 	ldw	x, (0x06, sp)
      00859A 4B 03            [ 1] 1210 	push	#0x03
      00859C 89               [ 2] 1211 	pushw	x
      00859D 4B 2A            [ 1] 1212 	push	#0x2a
      00859F CD 81 48         [ 4] 1213 	call	_write_spi_buf
      0085A2 5B 04            [ 2] 1214 	addw	sp, #4
                                   1215 ;	se8r01.c: 436: if (SE8R01_DR_2M==1)
      0085A4 CE 00 10         [ 2] 1216 	ldw	x, _SE8R01_DR_2M+0
      0085A7 A3 00 01         [ 2] 1217 	cpw	x, #0x0001
      0085AA 26 07            [ 1] 1218 	jrne	00114$
                                   1219 ;	se8r01.c: 437: { temp[0]=0x29;}
      0085AC 1E 06            [ 2] 1220 	ldw	x, (0x06, sp)
      0085AE A6 29            [ 1] 1221 	ld	a, #0x29
      0085B0 F7               [ 1] 1222 	ld	(x), a
      0085B1 20 05            [ 2] 1223 	jra	00115$
      0085B3                       1224 00114$:
                                   1225 ;	se8r01.c: 439: { temp[0]=0x14;}
      0085B3 1E 06            [ 2] 1226 	ldw	x, (0x06, sp)
      0085B5 A6 14            [ 1] 1227 	ld	a, #0x14
      0085B7 F7               [ 1] 1228 	ld	(x), a
      0085B8                       1229 00115$:
                                   1230 ;	se8r01.c: 441: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      0085B8 1E 06            [ 2] 1231 	ldw	x, (0x06, sp)
      0085BA 4B 01            [ 1] 1232 	push	#0x01
      0085BC 89               [ 2] 1233 	pushw	x
      0085BD 4B 2C            [ 1] 1234 	push	#0x2c
      0085BF CD 81 48         [ 4] 1235 	call	_write_spi_buf
      0085C2 5B 04            [ 2] 1236 	addw	sp, #4
                                   1237 ;	se8r01.c: 443: temp[0]=0x00;
      0085C4 1E 06            [ 2] 1238 	ldw	x, (0x06, sp)
      0085C6 7F               [ 1] 1239 	clr	(x)
                                   1240 ;	se8r01.c: 444: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      0085C7 1E 06            [ 2] 1241 	ldw	x, (0x06, sp)
      0085C9 4B 01            [ 1] 1242 	push	#0x01
      0085CB 89               [ 2] 1243 	pushw	x
      0085CC 4B 37            [ 1] 1244 	push	#0x37
      0085CE CD 81 48         [ 4] 1245 	call	_write_spi_buf
      0085D1 5B 04            [ 2] 1246 	addw	sp, #4
                                   1247 ;	se8r01.c: 446: temp[0]=0x7F;
      0085D3 1E 06            [ 2] 1248 	ldw	x, (0x06, sp)
      0085D5 A6 7F            [ 1] 1249 	ld	a, #0x7f
      0085D7 F7               [ 1] 1250 	ld	(x), a
                                   1251 ;	se8r01.c: 447: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      0085D8 1E 06            [ 2] 1252 	ldw	x, (0x06, sp)
      0085DA 4B 01            [ 1] 1253 	push	#0x01
      0085DC 89               [ 2] 1254 	pushw	x
      0085DD 4B 38            [ 1] 1255 	push	#0x38
      0085DF CD 81 48         [ 4] 1256 	call	_write_spi_buf
      0085E2 5B 04            [ 2] 1257 	addw	sp, #4
                                   1258 ;	se8r01.c: 449: temp[0]=0x02;
      0085E4 1E 06            [ 2] 1259 	ldw	x, (0x06, sp)
      0085E6 A6 02            [ 1] 1260 	ld	a, #0x02
      0085E8 F7               [ 1] 1261 	ld	(x), a
                                   1262 ;	se8r01.c: 450: temp[1]=0xC1;
      0085E9 1E 0A            [ 2] 1263 	ldw	x, (0x0a, sp)
      0085EB A6 C1            [ 1] 1264 	ld	a, #0xc1
      0085ED F7               [ 1] 1265 	ld	(x), a
                                   1266 ;	se8r01.c: 451: temp[2]=0xEB;            
      0085EE 1E 08            [ 2] 1267 	ldw	x, (0x08, sp)
      0085F0 A6 EB            [ 1] 1268 	ld	a, #0xeb
      0085F2 F7               [ 1] 1269 	ld	(x), a
                                   1270 ;	se8r01.c: 452: temp[3]=0x1C;
      0085F3 1E 0C            [ 2] 1271 	ldw	x, (0x0c, sp)
      0085F5 A6 1C            [ 1] 1272 	ld	a, #0x1c
      0085F7 F7               [ 1] 1273 	ld	(x), a
                                   1274 ;	se8r01.c: 453: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0085F8 1E 06            [ 2] 1275 	ldw	x, (0x06, sp)
      0085FA 4B 04            [ 1] 1276 	push	#0x04
      0085FC 89               [ 2] 1277 	pushw	x
      0085FD 4B 3D            [ 1] 1278 	push	#0x3d
      0085FF CD 81 48         [ 4] 1279 	call	_write_spi_buf
      008602 5B 04            [ 2] 1280 	addw	sp, #4
                                   1281 ;	se8r01.c: 455: temp[0]=0x97;
      008604 1E 06            [ 2] 1282 	ldw	x, (0x06, sp)
      008606 A6 97            [ 1] 1283 	ld	a, #0x97
      008608 F7               [ 1] 1284 	ld	(x), a
                                   1285 ;	se8r01.c: 456: temp[1]=0x64;
      008609 1E 0A            [ 2] 1286 	ldw	x, (0x0a, sp)
      00860B A6 64            [ 1] 1287 	ld	a, #0x64
      00860D F7               [ 1] 1288 	ld	(x), a
                                   1289 ;	se8r01.c: 457: temp[2]=0x00;
      00860E 1E 08            [ 2] 1290 	ldw	x, (0x08, sp)
      008610 7F               [ 1] 1291 	clr	(x)
                                   1292 ;	se8r01.c: 458: temp[3]=0x81;
      008611 1E 0C            [ 2] 1293 	ldw	x, (0x0c, sp)
      008613 A6 81            [ 1] 1294 	ld	a, #0x81
      008615 F7               [ 1] 1295 	ld	(x), a
                                   1296 ;	se8r01.c: 459: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      008616 1E 06            [ 2] 1297 	ldw	x, (0x06, sp)
      008618 4B 04            [ 1] 1298 	push	#0x04
      00861A 89               [ 2] 1299 	pushw	x
      00861B 4B 3E            [ 1] 1300 	push	#0x3e
      00861D CD 81 48         [ 4] 1301 	call	_write_spi_buf
      008620 5B 04            [ 2] 1302 	addw	sp, #4
                                   1303 ;	se8r01.c: 460: rf_switch_bank(iBANK0);
      008622 4B 00            [ 1] 1304 	push	#0x00
      008624 CD 84 88         [ 4] 1305 	call	_rf_switch_bank
      008627 84               [ 1] 1306 	pop	a
                                   1307 ;	se8r01.c: 465: delayTenMicro();
      008628 CD 80 A0         [ 4] 1308 	call	_delayTenMicro
                                   1309 ;	se8r01.c: 466: PC_ODR |= (1 << CE);
      00862B AE 50 0A         [ 2] 1310 	ldw	x, #0x500a
      00862E F6               [ 1] 1311 	ld	a, (x)
      00862F AA 10            [ 1] 1312 	or	a, #0x10
      008631 F7               [ 1] 1313 	ld	(x), a
                                   1314 ;	se8r01.c: 467: delayTenMicro();
      008632 CD 80 A0         [ 4] 1315 	call	_delayTenMicro
                                   1316 ;	se8r01.c: 468: PC_ODR &= ~(1 << CE);
      008635 AE 50 0A         [ 2] 1317 	ldw	x, #0x500a
      008638 F6               [ 1] 1318 	ld	a, (x)
      008639 A4 EF            [ 1] 1319 	and	a, #0xef
      00863B F7               [ 1] 1320 	ld	(x), a
                                   1321 ;	se8r01.c: 469: delay(50);                            // delay 50ms waitting for calibaration.
      00863C 4B 32            [ 1] 1322 	push	#0x32
      00863E 4B 00            [ 1] 1323 	push	#0x00
      008640 CD 82 2E         [ 4] 1324 	call	_delay
      008643 5B 02            [ 2] 1325 	addw	sp, #2
                                   1326 ;	se8r01.c: 474: delayTenMicro();
      008645 CD 80 A0         [ 4] 1327 	call	_delayTenMicro
                                   1328 ;	se8r01.c: 475: PC_ODR |= (1 << CE);
      008648 AE 50 0A         [ 2] 1329 	ldw	x, #0x500a
      00864B F6               [ 1] 1330 	ld	a, (x)
      00864C AA 10            [ 1] 1331 	or	a, #0x10
      00864E F7               [ 1] 1332 	ld	(x), a
                                   1333 ;	se8r01.c: 476: delayTenMicro();
      00864F CD 80 A0         [ 4] 1334 	call	_delayTenMicro
                                   1335 ;	se8r01.c: 477: PC_ODR &= ~(1 << CE);
      008652 AE 50 0A         [ 2] 1336 	ldw	x, #0x500a
      008655 F6               [ 1] 1337 	ld	a, (x)
      008656 A4 EF            [ 1] 1338 	and	a, #0xef
      008658 F7               [ 1] 1339 	ld	(x), a
                                   1340 ;	se8r01.c: 478: delay(50);                            // delay 50ms waitting for calibaration.
      008659 4B 32            [ 1] 1341 	push	#0x32
      00865B 4B 00            [ 1] 1342 	push	#0x00
      00865D CD 82 2E         [ 4] 1343 	call	_delay
      008660 5B 02            [ 2] 1344 	addw	sp, #2
      008662 5B 0D            [ 2] 1345 	addw	sp, #13
      008664 81               [ 4] 1346 	ret
                                   1347 ;	se8r01.c: 482: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1348 ;	-----------------------------------------
                                   1349 ;	 function SE8R01_Analog_Init
                                   1350 ;	-----------------------------------------
      008665                       1351 _SE8R01_Analog_Init:
      008665 52 15            [ 2] 1352 	sub	sp, #21
                                   1353 ;	se8r01.c: 487: gtemp[0]=0x28;
      008667 AE 00 01         [ 2] 1354 	ldw	x, #_gtemp+0
      00866A 1F 0E            [ 2] 1355 	ldw	(0x0e, sp), x
      00866C 1E 0E            [ 2] 1356 	ldw	x, (0x0e, sp)
      00866E A6 28            [ 1] 1357 	ld	a, #0x28
      008670 F7               [ 1] 1358 	ld	(x), a
                                   1359 ;	se8r01.c: 488: gtemp[1]=0x32;
      008671 1E 0E            [ 2] 1360 	ldw	x, (0x0e, sp)
      008673 5C               [ 2] 1361 	incw	x
      008674 1F 0C            [ 2] 1362 	ldw	(0x0c, sp), x
      008676 1E 0C            [ 2] 1363 	ldw	x, (0x0c, sp)
      008678 A6 32            [ 1] 1364 	ld	a, #0x32
      00867A F7               [ 1] 1365 	ld	(x), a
                                   1366 ;	se8r01.c: 489: gtemp[2]=0x80;
      00867B 1E 0E            [ 2] 1367 	ldw	x, (0x0e, sp)
      00867D 5C               [ 2] 1368 	incw	x
      00867E 5C               [ 2] 1369 	incw	x
      00867F 1F 0A            [ 2] 1370 	ldw	(0x0a, sp), x
      008681 1E 0A            [ 2] 1371 	ldw	x, (0x0a, sp)
      008683 A6 80            [ 1] 1372 	ld	a, #0x80
      008685 F7               [ 1] 1373 	ld	(x), a
                                   1374 ;	se8r01.c: 490: gtemp[3]=0x90;
      008686 1E 0E            [ 2] 1375 	ldw	x, (0x0e, sp)
      008688 1C 00 03         [ 2] 1376 	addw	x, #0x0003
      00868B 1F 08            [ 2] 1377 	ldw	(0x08, sp), x
      00868D 1E 08            [ 2] 1378 	ldw	x, (0x08, sp)
      00868F A6 90            [ 1] 1379 	ld	a, #0x90
      008691 F7               [ 1] 1380 	ld	(x), a
                                   1381 ;	se8r01.c: 491: gtemp[4]=0x00;
      008692 1E 0E            [ 2] 1382 	ldw	x, (0x0e, sp)
      008694 1C 00 04         [ 2] 1383 	addw	x, #0x0004
      008697 7F               [ 1] 1384 	clr	(x)
                                   1385 ;	se8r01.c: 492: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      008698 1E 0E            [ 2] 1386 	ldw	x, (0x0e, sp)
      00869A 4B 05            [ 1] 1387 	push	#0x05
      00869C 89               [ 2] 1388 	pushw	x
      00869D 4B 3E            [ 1] 1389 	push	#0x3e
      00869F CD 81 48         [ 4] 1390 	call	_write_spi_buf
      0086A2 5B 04            [ 2] 1391 	addw	sp, #4
                                   1392 ;	se8r01.c: 493: delay(2);
      0086A4 4B 02            [ 1] 1393 	push	#0x02
      0086A6 4B 00            [ 1] 1394 	push	#0x00
      0086A8 CD 82 2E         [ 4] 1395 	call	_delay
      0086AB 5B 02            [ 2] 1396 	addw	sp, #2
                                   1397 ;	se8r01.c: 496: rf_switch_bank(iBANK1);
      0086AD 4B 80            [ 1] 1398 	push	#0x80
      0086AF CD 84 88         [ 4] 1399 	call	_rf_switch_bank
      0086B2 84               [ 1] 1400 	pop	a
                                   1401 ;	se8r01.c: 498: temp[0]=0x40;
      0086B3 96               [ 1] 1402 	ldw	x, sp
      0086B4 5C               [ 2] 1403 	incw	x
      0086B5 1F 14            [ 2] 1404 	ldw	(0x14, sp), x
      0086B7 1E 14            [ 2] 1405 	ldw	x, (0x14, sp)
      0086B9 A6 40            [ 1] 1406 	ld	a, #0x40
      0086BB F7               [ 1] 1407 	ld	(x), a
                                   1408 ;	se8r01.c: 499: temp[1]=0x01;               
      0086BC 1E 14            [ 2] 1409 	ldw	x, (0x14, sp)
      0086BE 5C               [ 2] 1410 	incw	x
      0086BF 1F 12            [ 2] 1411 	ldw	(0x12, sp), x
      0086C1 1E 12            [ 2] 1412 	ldw	x, (0x12, sp)
      0086C3 A6 01            [ 1] 1413 	ld	a, #0x01
      0086C5 F7               [ 1] 1414 	ld	(x), a
                                   1415 ;	se8r01.c: 500: temp[2]=0x30;               
      0086C6 1E 14            [ 2] 1416 	ldw	x, (0x14, sp)
      0086C8 5C               [ 2] 1417 	incw	x
      0086C9 5C               [ 2] 1418 	incw	x
      0086CA 1F 10            [ 2] 1419 	ldw	(0x10, sp), x
      0086CC 1E 10            [ 2] 1420 	ldw	x, (0x10, sp)
      0086CE A6 30            [ 1] 1421 	ld	a, #0x30
      0086D0 F7               [ 1] 1422 	ld	(x), a
                                   1423 ;	se8r01.c: 502: { temp[3]=0xE2; }              
      0086D1 1E 14            [ 2] 1424 	ldw	x, (0x14, sp)
      0086D3 1C 00 03         [ 2] 1425 	addw	x, #0x0003
      0086D6 1F 06            [ 2] 1426 	ldw	(0x06, sp), x
                                   1427 ;	se8r01.c: 501: if (SE8R01_DR_2M==1)
      0086D8 CE 00 10         [ 2] 1428 	ldw	x, _SE8R01_DR_2M+0
      0086DB A3 00 01         [ 2] 1429 	cpw	x, #0x0001
      0086DE 26 07            [ 1] 1430 	jrne	00102$
                                   1431 ;	se8r01.c: 502: { temp[3]=0xE2; }              
      0086E0 1E 06            [ 2] 1432 	ldw	x, (0x06, sp)
      0086E2 A6 E2            [ 1] 1433 	ld	a, #0xe2
      0086E4 F7               [ 1] 1434 	ld	(x), a
      0086E5 20 05            [ 2] 1435 	jra	00103$
      0086E7                       1436 00102$:
                                   1437 ;	se8r01.c: 504: { temp[3]=0xE0;}
      0086E7 1E 06            [ 2] 1438 	ldw	x, (0x06, sp)
      0086E9 A6 E0            [ 1] 1439 	ld	a, #0xe0
      0086EB F7               [ 1] 1440 	ld	(x), a
      0086EC                       1441 00103$:
                                   1442 ;	se8r01.c: 506: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      0086EC 1E 14            [ 2] 1443 	ldw	x, (0x14, sp)
      0086EE 4B 04            [ 1] 1444 	push	#0x04
      0086F0 89               [ 2] 1445 	pushw	x
      0086F1 4B 21            [ 1] 1446 	push	#0x21
      0086F3 CD 81 48         [ 4] 1447 	call	_write_spi_buf
      0086F6 5B 04            [ 2] 1448 	addw	sp, #4
                                   1449 ;	se8r01.c: 508: temp[0]=0x29;
      0086F8 1E 14            [ 2] 1450 	ldw	x, (0x14, sp)
      0086FA A6 29            [ 1] 1451 	ld	a, #0x29
      0086FC F7               [ 1] 1452 	ld	(x), a
                                   1453 ;	se8r01.c: 509: temp[1]=0x89;
      0086FD 1E 12            [ 2] 1454 	ldw	x, (0x12, sp)
      0086FF A6 89            [ 1] 1455 	ld	a, #0x89
      008701 F7               [ 1] 1456 	ld	(x), a
                                   1457 ;	se8r01.c: 510: temp[2]=0x55;                     
      008702 1E 10            [ 2] 1458 	ldw	x, (0x10, sp)
      008704 A6 55            [ 1] 1459 	ld	a, #0x55
      008706 F7               [ 1] 1460 	ld	(x), a
                                   1461 ;	se8r01.c: 511: temp[3]=0x40;
      008707 1E 06            [ 2] 1462 	ldw	x, (0x06, sp)
      008709 A6 40            [ 1] 1463 	ld	a, #0x40
      00870B F7               [ 1] 1464 	ld	(x), a
                                   1465 ;	se8r01.c: 512: temp[4]=0x50;
      00870C 1E 14            [ 2] 1466 	ldw	x, (0x14, sp)
      00870E A6 50            [ 1] 1467 	ld	a, #0x50
      008710 E7 04            [ 1] 1468 	ld	(0x0004, x), a
                                   1469 ;	se8r01.c: 513: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      008712 1E 14            [ 2] 1470 	ldw	x, (0x14, sp)
      008714 4B 05            [ 1] 1471 	push	#0x05
      008716 89               [ 2] 1472 	pushw	x
      008717 4B 23            [ 1] 1473 	push	#0x23
      008719 CD 81 48         [ 4] 1474 	call	_write_spi_buf
      00871C 5B 04            [ 2] 1475 	addw	sp, #4
                                   1476 ;	se8r01.c: 515: if (SE8R01_DR_2M==1)
      00871E CE 00 10         [ 2] 1477 	ldw	x, _SE8R01_DR_2M+0
      008721 A3 00 01         [ 2] 1478 	cpw	x, #0x0001
      008724 26 07            [ 1] 1479 	jrne	00105$
                                   1480 ;	se8r01.c: 516: { temp[0]=0x29;}
      008726 1E 14            [ 2] 1481 	ldw	x, (0x14, sp)
      008728 A6 29            [ 1] 1482 	ld	a, #0x29
      00872A F7               [ 1] 1483 	ld	(x), a
      00872B 20 05            [ 2] 1484 	jra	00106$
      00872D                       1485 00105$:
                                   1486 ;	se8r01.c: 518: { temp[0]=0x14;}
      00872D 1E 14            [ 2] 1487 	ldw	x, (0x14, sp)
      00872F A6 14            [ 1] 1488 	ld	a, #0x14
      008731 F7               [ 1] 1489 	ld	(x), a
      008732                       1490 00106$:
                                   1491 ;	se8r01.c: 520: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      008732 1E 14            [ 2] 1492 	ldw	x, (0x14, sp)
      008734 4B 01            [ 1] 1493 	push	#0x01
      008736 89               [ 2] 1494 	pushw	x
      008737 4B 2C            [ 1] 1495 	push	#0x2c
      008739 CD 81 48         [ 4] 1496 	call	_write_spi_buf
      00873C 5B 04            [ 2] 1497 	addw	sp, #4
                                   1498 ;	se8r01.c: 522: temp[0]=0x55;
      00873E 1E 14            [ 2] 1499 	ldw	x, (0x14, sp)
      008740 A6 55            [ 1] 1500 	ld	a, #0x55
      008742 F7               [ 1] 1501 	ld	(x), a
                                   1502 ;	se8r01.c: 523: temp[1]=0xC2;
      008743 1E 12            [ 2] 1503 	ldw	x, (0x12, sp)
      008745 A6 C2            [ 1] 1504 	ld	a, #0xc2
      008747 F7               [ 1] 1505 	ld	(x), a
                                   1506 ;	se8r01.c: 524: temp[2]=0x09;
      008748 1E 10            [ 2] 1507 	ldw	x, (0x10, sp)
      00874A A6 09            [ 1] 1508 	ld	a, #0x09
      00874C F7               [ 1] 1509 	ld	(x), a
                                   1510 ;	se8r01.c: 525: temp[3]=0xAC;  
      00874D 1E 06            [ 2] 1511 	ldw	x, (0x06, sp)
      00874F A6 AC            [ 1] 1512 	ld	a, #0xac
      008751 F7               [ 1] 1513 	ld	(x), a
                                   1514 ;	se8r01.c: 526: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      008752 1E 14            [ 2] 1515 	ldw	x, (0x14, sp)
      008754 4B 04            [ 1] 1516 	push	#0x04
      008756 89               [ 2] 1517 	pushw	x
      008757 4B 31            [ 1] 1518 	push	#0x31
      008759 CD 81 48         [ 4] 1519 	call	_write_spi_buf
      00875C 5B 04            [ 2] 1520 	addw	sp, #4
                                   1521 ;	se8r01.c: 528: temp[0]=0x00;
      00875E 1E 14            [ 2] 1522 	ldw	x, (0x14, sp)
      008760 7F               [ 1] 1523 	clr	(x)
                                   1524 ;	se8r01.c: 529: temp[1]=0x14;
      008761 1E 12            [ 2] 1525 	ldw	x, (0x12, sp)
      008763 A6 14            [ 1] 1526 	ld	a, #0x14
      008765 F7               [ 1] 1527 	ld	(x), a
                                   1528 ;	se8r01.c: 530: temp[2]=0x08;   
      008766 1E 10            [ 2] 1529 	ldw	x, (0x10, sp)
      008768 A6 08            [ 1] 1530 	ld	a, #0x08
      00876A F7               [ 1] 1531 	ld	(x), a
                                   1532 ;	se8r01.c: 531: temp[3]=0x29;
      00876B 1E 06            [ 2] 1533 	ldw	x, (0x06, sp)
      00876D A6 29            [ 1] 1534 	ld	a, #0x29
      00876F F7               [ 1] 1535 	ld	(x), a
                                   1536 ;	se8r01.c: 532: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      008770 1E 14            [ 2] 1537 	ldw	x, (0x14, sp)
      008772 4B 04            [ 1] 1538 	push	#0x04
      008774 89               [ 2] 1539 	pushw	x
      008775 4B 33            [ 1] 1540 	push	#0x33
      008777 CD 81 48         [ 4] 1541 	call	_write_spi_buf
      00877A 5B 04            [ 2] 1542 	addw	sp, #4
                                   1543 ;	se8r01.c: 534: temp[0]=0x02;
      00877C 1E 14            [ 2] 1544 	ldw	x, (0x14, sp)
      00877E A6 02            [ 1] 1545 	ld	a, #0x02
      008780 F7               [ 1] 1546 	ld	(x), a
                                   1547 ;	se8r01.c: 535: temp[1]=0xC1;
      008781 1E 12            [ 2] 1548 	ldw	x, (0x12, sp)
      008783 A6 C1            [ 1] 1549 	ld	a, #0xc1
      008785 F7               [ 1] 1550 	ld	(x), a
                                   1551 ;	se8r01.c: 536: temp[2]=0xCB;  
      008786 1E 10            [ 2] 1552 	ldw	x, (0x10, sp)
      008788 A6 CB            [ 1] 1553 	ld	a, #0xcb
      00878A F7               [ 1] 1554 	ld	(x), a
                                   1555 ;	se8r01.c: 537: temp[3]=0x1C;
      00878B 1E 06            [ 2] 1556 	ldw	x, (0x06, sp)
      00878D A6 1C            [ 1] 1557 	ld	a, #0x1c
      00878F F7               [ 1] 1558 	ld	(x), a
                                   1559 ;	se8r01.c: 538: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      008790 1E 14            [ 2] 1560 	ldw	x, (0x14, sp)
      008792 4B 04            [ 1] 1561 	push	#0x04
      008794 89               [ 2] 1562 	pushw	x
      008795 4B 3D            [ 1] 1563 	push	#0x3d
      008797 CD 81 48         [ 4] 1564 	call	_write_spi_buf
      00879A 5B 04            [ 2] 1565 	addw	sp, #4
                                   1566 ;	se8r01.c: 540: temp[0]=0x97;
      00879C 1E 14            [ 2] 1567 	ldw	x, (0x14, sp)
      00879E A6 97            [ 1] 1568 	ld	a, #0x97
      0087A0 F7               [ 1] 1569 	ld	(x), a
                                   1570 ;	se8r01.c: 541: temp[1]=0x64;
      0087A1 1E 12            [ 2] 1571 	ldw	x, (0x12, sp)
      0087A3 A6 64            [ 1] 1572 	ld	a, #0x64
      0087A5 F7               [ 1] 1573 	ld	(x), a
                                   1574 ;	se8r01.c: 542: temp[2]=0x00;
      0087A6 1E 10            [ 2] 1575 	ldw	x, (0x10, sp)
      0087A8 7F               [ 1] 1576 	clr	(x)
                                   1577 ;	se8r01.c: 543: temp[3]=0x01;
      0087A9 1E 06            [ 2] 1578 	ldw	x, (0x06, sp)
      0087AB A6 01            [ 1] 1579 	ld	a, #0x01
      0087AD F7               [ 1] 1580 	ld	(x), a
                                   1581 ;	se8r01.c: 544: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      0087AE 1E 14            [ 2] 1582 	ldw	x, (0x14, sp)
      0087B0 4B 04            [ 1] 1583 	push	#0x04
      0087B2 89               [ 2] 1584 	pushw	x
      0087B3 4B 3E            [ 1] 1585 	push	#0x3e
      0087B5 CD 81 48         [ 4] 1586 	call	_write_spi_buf
      0087B8 5B 04            [ 2] 1587 	addw	sp, #4
                                   1588 ;	se8r01.c: 546: gtemp[0]=0x2A;
      0087BA 1E 0E            [ 2] 1589 	ldw	x, (0x0e, sp)
      0087BC A6 2A            [ 1] 1590 	ld	a, #0x2a
      0087BE F7               [ 1] 1591 	ld	(x), a
                                   1592 ;	se8r01.c: 547: gtemp[1]=0x04;
      0087BF 1E 0C            [ 2] 1593 	ldw	x, (0x0c, sp)
      0087C1 A6 04            [ 1] 1594 	ld	a, #0x04
      0087C3 F7               [ 1] 1595 	ld	(x), a
                                   1596 ;	se8r01.c: 548: gtemp[2]=0x00;
      0087C4 1E 0A            [ 2] 1597 	ldw	x, (0x0a, sp)
      0087C6 7F               [ 1] 1598 	clr	(x)
                                   1599 ;	se8r01.c: 549: gtemp[3]=0x7D;
      0087C7 1E 08            [ 2] 1600 	ldw	x, (0x08, sp)
      0087C9 A6 7D            [ 1] 1601 	ld	a, #0x7d
      0087CB F7               [ 1] 1602 	ld	(x), a
                                   1603 ;	se8r01.c: 550: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      0087CC 1E 0E            [ 2] 1604 	ldw	x, (0x0e, sp)
      0087CE 4B 04            [ 1] 1605 	push	#0x04
      0087D0 89               [ 2] 1606 	pushw	x
      0087D1 4B 3F            [ 1] 1607 	push	#0x3f
      0087D3 CD 81 48         [ 4] 1608 	call	_write_spi_buf
      0087D6 5B 04            [ 2] 1609 	addw	sp, #4
                                   1610 ;	se8r01.c: 552: rf_switch_bank(iBANK0);
      0087D8 4B 00            [ 1] 1611 	push	#0x00
      0087DA CD 84 88         [ 4] 1612 	call	_rf_switch_bank
      0087DD 84               [ 1] 1613 	pop	a
      0087DE 5B 15            [ 2] 1614 	addw	sp, #21
      0087E0 81               [ 4] 1615 	ret
                                   1616 ;	se8r01.c: 555: void SE8R01_Init()  
                                   1617 ;	-----------------------------------------
                                   1618 ;	 function SE8R01_Init
                                   1619 ;	-----------------------------------------
      0087E1                       1620 _SE8R01_Init:
      0087E1 52 05            [ 2] 1621 	sub	sp, #5
                                   1622 ;	se8r01.c: 558: SE8R01_Calibration();   
      0087E3 CD 84 A5         [ 4] 1623 	call	_SE8R01_Calibration
                                   1624 ;	se8r01.c: 559: SE8R01_Analog_Init();   
      0087E6 CD 86 65         [ 4] 1625 	call	_SE8R01_Analog_Init
                                   1626 ;	se8r01.c: 563: if (SE8R01_DR_2M==1)
      0087E9 CE 00 10         [ 2] 1627 	ldw	x, _SE8R01_DR_2M+0
      0087EC A3 00 01         [ 2] 1628 	cpw	x, #0x0001
      0087EF 26 07            [ 1] 1629 	jrne	00105$
                                   1630 ;	se8r01.c: 564: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      0087F1 96               [ 1] 1631 	ldw	x, sp
      0087F2 5C               [ 2] 1632 	incw	x
      0087F3 A6 4F            [ 1] 1633 	ld	a, #0x4f
      0087F5 F7               [ 1] 1634 	ld	(x), a
      0087F6 20 14            [ 2] 1635 	jra	00106$
      0087F8                       1636 00105$:
                                   1637 ;	se8r01.c: 565: else if  (SE8R01_DR_1M==1)
      0087F8 CE 00 12         [ 2] 1638 	ldw	x, _SE8R01_DR_1M+0
      0087FB A3 00 01         [ 2] 1639 	cpw	x, #0x0001
      0087FE 26 07            [ 1] 1640 	jrne	00102$
                                   1641 ;	se8r01.c: 566: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      008800 96               [ 1] 1642 	ldw	x, sp
      008801 5C               [ 2] 1643 	incw	x
      008802 A6 47            [ 1] 1644 	ld	a, #0x47
      008804 F7               [ 1] 1645 	ld	(x), a
      008805 20 05            [ 2] 1646 	jra	00106$
      008807                       1647 00102$:
                                   1648 ;	se8r01.c: 568: {temp[0]=0b01101111;  }     //500K,+5dbm
      008807 96               [ 1] 1649 	ldw	x, sp
      008808 5C               [ 2] 1650 	incw	x
      008809 A6 6F            [ 1] 1651 	ld	a, #0x6f
      00880B F7               [ 1] 1652 	ld	(x), a
      00880C                       1653 00106$:
                                   1654 ;	se8r01.c: 570: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      00880C 96               [ 1] 1655 	ldw	x, sp
      00880D 5C               [ 2] 1656 	incw	x
      00880E 4B 01            [ 1] 1657 	push	#0x01
      008810 89               [ 2] 1658 	pushw	x
      008811 4B 26            [ 1] 1659 	push	#0x26
      008813 CD 81 48         [ 4] 1660 	call	_write_spi_buf
      008816 5B 04            [ 2] 1661 	addw	sp, #4
                                   1662 ;	se8r01.c: 574: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0b00111111);          //enable auto acc on pip 1
      008818 4B 3F            [ 1] 1663 	push	#0x3f
      00881A 4B 21            [ 1] 1664 	push	#0x21
      00881C CD 80 CE         [ 4] 1665 	call	_write_spi_reg
      00881F 5B 02            [ 2] 1666 	addw	sp, #2
                                   1667 ;	se8r01.c: 575: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0b00111111);      //enable pip 1
      008821 4B 3F            [ 1] 1668 	push	#0x3f
      008823 4B 22            [ 1] 1669 	push	#0x22
      008825 CD 80 CE         [ 4] 1670 	call	_write_spi_reg
      008828 5B 02            [ 2] 1671 	addw	sp, #2
                                   1672 ;	se8r01.c: 576: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);  
      00882A 4B 02            [ 1] 1673 	push	#0x02
      00882C 4B 23            [ 1] 1674 	push	#0x23
      00882E CD 80 CE         [ 4] 1675 	call	_write_spi_reg
      008831 5B 02            [ 2] 1676 	addw	sp, #2
                                   1677 ;	se8r01.c: 577: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      008833 4B 28            [ 1] 1678 	push	#0x28
      008835 4B 25            [ 1] 1679 	push	#0x25
      008837 CD 80 CE         [ 4] 1680 	call	_write_spi_reg
      00883A 5B 02            [ 2] 1681 	addw	sp, #2
                                   1682 ;	se8r01.c: 579: write_spi_buf(WRITE_REG + TX_ADDR, ADDRESS0, ADR_WIDTH);    	
      00883C AE 00 26         [ 2] 1683 	ldw	x, #_ADDRESS0+0
      00883F 90 93            [ 1] 1684 	ldw	y, x
      008841 89               [ 2] 1685 	pushw	x
      008842 4B 04            [ 1] 1686 	push	#0x04
      008844 90 89            [ 2] 1687 	pushw	y
      008846 4B 30            [ 1] 1688 	push	#0x30
      008848 CD 81 48         [ 4] 1689 	call	_write_spi_buf
      00884B 5B 04            [ 2] 1690 	addw	sp, #4
      00884D 85               [ 2] 1691 	popw	x
                                   1692 ;	se8r01.c: 580: write_spi_buf(WRITE_REG + RX_ADDR_P0, ADDRESS0, ADR_WIDTH); 
      00884E 4B 04            [ 1] 1693 	push	#0x04
      008850 89               [ 2] 1694 	pushw	x
      008851 4B 2A            [ 1] 1695 	push	#0x2a
      008853 CD 81 48         [ 4] 1696 	call	_write_spi_buf
      008856 5B 04            [ 2] 1697 	addw	sp, #4
                                   1698 ;	se8r01.c: 581: write_spi_buf(WRITE_REG + RX_ADDR_P1, ADDRESS1, ADR_WIDTH); 
      008858 AE 00 22         [ 2] 1699 	ldw	x, #_ADDRESS1+0
      00885B 4B 04            [ 1] 1700 	push	#0x04
      00885D 89               [ 2] 1701 	pushw	x
      00885E 4B 2B            [ 1] 1702 	push	#0x2b
      008860 CD 81 48         [ 4] 1703 	call	_write_spi_buf
      008863 5B 04            [ 2] 1704 	addw	sp, #4
                                   1705 ;	se8r01.c: 582: write_spi_buf(WRITE_REG + RX_ADDR_P2, ADDRESS2, 1); 
      008865 AE 00 1E         [ 2] 1706 	ldw	x, #_ADDRESS2+0
      008868 4B 01            [ 1] 1707 	push	#0x01
      00886A 89               [ 2] 1708 	pushw	x
      00886B 4B 2C            [ 1] 1709 	push	#0x2c
      00886D CD 81 48         [ 4] 1710 	call	_write_spi_buf
      008870 5B 04            [ 2] 1711 	addw	sp, #4
                                   1712 ;	se8r01.c: 583: write_spi_buf(WRITE_REG + RX_ADDR_P3, ADDRESS3, 1); 
      008872 AE 00 1F         [ 2] 1713 	ldw	x, #_ADDRESS3+0
      008875 4B 01            [ 1] 1714 	push	#0x01
      008877 89               [ 2] 1715 	pushw	x
      008878 4B 2D            [ 1] 1716 	push	#0x2d
      00887A CD 81 48         [ 4] 1717 	call	_write_spi_buf
      00887D 5B 04            [ 2] 1718 	addw	sp, #4
                                   1719 ;	se8r01.c: 584: write_spi_buf(WRITE_REG + RX_ADDR_P4, ADDRESS4, 1); 
      00887F AE 00 20         [ 2] 1720 	ldw	x, #_ADDRESS4+0
      008882 4B 01            [ 1] 1721 	push	#0x01
      008884 89               [ 2] 1722 	pushw	x
      008885 4B 2E            [ 1] 1723 	push	#0x2e
      008887 CD 81 48         [ 4] 1724 	call	_write_spi_buf
      00888A 5B 04            [ 2] 1725 	addw	sp, #4
                                   1726 ;	se8r01.c: 585: write_spi_buf(WRITE_REG + RX_ADDR_P5, ADDRESS5, 1); 
      00888C AE 00 21         [ 2] 1727 	ldw	x, #_ADDRESS5+0
      00888F 4B 01            [ 1] 1728 	push	#0x01
      008891 89               [ 2] 1729 	pushw	x
      008892 4B 2F            [ 1] 1730 	push	#0x2f
      008894 CD 81 48         [ 4] 1731 	call	_write_spi_buf
      008897 5B 04            [ 2] 1732 	addw	sp, #4
                                   1733 ;	se8r01.c: 586: write_spi_reg(WRITE_REG + RX_PW_P0, PLOAD_WIDTH); 
      008899 4B 20            [ 1] 1734 	push	#0x20
      00889B 4B 31            [ 1] 1735 	push	#0x31
      00889D CD 80 CE         [ 4] 1736 	call	_write_spi_reg
      0088A0 5B 02            [ 2] 1737 	addw	sp, #2
                                   1738 ;	se8r01.c: 587: write_spi_reg(WRITE_REG|iRF_BANK0_CONFIG, 0x3f); 
      0088A2 4B 3F            [ 1] 1739 	push	#0x3f
      0088A4 4B 20            [ 1] 1740 	push	#0x20
      0088A6 CD 80 CE         [ 4] 1741 	call	_write_spi_reg
      0088A9 5B 02            [ 2] 1742 	addw	sp, #2
                                   1743 ;	se8r01.c: 588: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0b00111111);          // enable dynamic payload length data
      0088AB 4B 3F            [ 1] 1744 	push	#0x3f
      0088AD 4B 3C            [ 1] 1745 	push	#0x3c
      0088AF CD 80 CE         [ 4] 1746 	call	_write_spi_reg
      0088B2 5B 02            [ 2] 1747 	addw	sp, #2
                                   1748 ;	se8r01.c: 589: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      0088B4 4B 07            [ 1] 1749 	push	#0x07
      0088B6 4B 3D            [ 1] 1750 	push	#0x3d
      0088B8 CD 80 CE         [ 4] 1751 	call	_write_spi_reg
      0088BB 5B 02            [ 2] 1752 	addw	sp, #2
                                   1753 ;	se8r01.c: 593: PC_ODR |= (1 << CE);
      0088BD AE 50 0A         [ 2] 1754 	ldw	x, #0x500a
      0088C0 F6               [ 1] 1755 	ld	a, (x)
      0088C1 AA 10            [ 1] 1756 	or	a, #0x10
      0088C3 F7               [ 1] 1757 	ld	(x), a
      0088C4 5B 05            [ 2] 1758 	addw	sp, #5
      0088C6 81               [ 4] 1759 	ret
                                   1760 ;	se8r01.c: 601: int main () {
                                   1761 ;	-----------------------------------------
                                   1762 ;	 function main
                                   1763 ;	-----------------------------------------
      0088C7                       1764 _main:
      0088C7 52 33            [ 2] 1765 	sub	sp, #51
                                   1766 ;	se8r01.c: 603: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      0088C9 90 96            [ 1] 1767 	ldw	y, sp
      0088CB 72 A9 00 22      [ 2] 1768 	addw	y, #34
      0088CF A6 D2            [ 1] 1769 	ld	a, #0xd2
      0088D1 90 F7            [ 1] 1770 	ld	(y), a
      0088D3 93               [ 1] 1771 	ldw	x, y
      0088D4 5C               [ 2] 1772 	incw	x
      0088D5 A6 F0            [ 1] 1773 	ld	a, #0xf0
      0088D7 F7               [ 1] 1774 	ld	(x), a
      0088D8 93               [ 1] 1775 	ldw	x, y
      0088D9 5C               [ 2] 1776 	incw	x
      0088DA 5C               [ 2] 1777 	incw	x
      0088DB A6 F0            [ 1] 1778 	ld	a, #0xf0
      0088DD F7               [ 1] 1779 	ld	(x), a
      0088DE 93               [ 1] 1780 	ldw	x, y
      0088DF A6 F0            [ 1] 1781 	ld	a, #0xf0
      0088E1 E7 03            [ 1] 1782 	ld	(0x0003, x), a
      0088E3 93               [ 1] 1783 	ldw	x, y
      0088E4 A6 F0            [ 1] 1784 	ld	a, #0xf0
      0088E6 E7 04            [ 1] 1785 	ld	(0x0004, x), a
                                   1786 ;	se8r01.c: 604: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      0088E8 90 96            [ 1] 1787 	ldw	y, sp
      0088EA 72 A9 00 27      [ 2] 1788 	addw	y, #39
      0088EE A6 E1            [ 1] 1789 	ld	a, #0xe1
      0088F0 90 F7            [ 1] 1790 	ld	(y), a
      0088F2 93               [ 1] 1791 	ldw	x, y
      0088F3 5C               [ 2] 1792 	incw	x
      0088F4 A6 F0            [ 1] 1793 	ld	a, #0xf0
      0088F6 F7               [ 1] 1794 	ld	(x), a
      0088F7 93               [ 1] 1795 	ldw	x, y
      0088F8 5C               [ 2] 1796 	incw	x
      0088F9 5C               [ 2] 1797 	incw	x
      0088FA A6 F0            [ 1] 1798 	ld	a, #0xf0
      0088FC F7               [ 1] 1799 	ld	(x), a
      0088FD 93               [ 1] 1800 	ldw	x, y
      0088FE A6 F0            [ 1] 1801 	ld	a, #0xf0
      008900 E7 03            [ 1] 1802 	ld	(0x0003, x), a
      008902 93               [ 1] 1803 	ldw	x, y
      008903 1C 00 04         [ 2] 1804 	addw	x, #0x0004
      008906 A6 F0            [ 1] 1805 	ld	a, #0xf0
      008908 F7               [ 1] 1806 	ld	(x), a
                                   1807 ;	se8r01.c: 608: InitializeSystemClock();
      008909 CD 81 E4         [ 4] 1808 	call	_InitializeSystemClock
                                   1809 ;	se8r01.c: 609: InitializeUART();
      00890C CD 83 E4         [ 4] 1810 	call	_InitializeUART
                                   1811 ;	se8r01.c: 611: InitializeSPI ();
      00890F CD 81 BC         [ 4] 1812 	call	_InitializeSPI
                                   1813 ;	se8r01.c: 614: memset (tx_payload, 0, sizeof(tx_payload));
      008912 96               [ 1] 1814 	ldw	x, sp
      008913 5C               [ 2] 1815 	incw	x
      008914 1F 32            [ 2] 1816 	ldw	(0x32, sp), x
      008916 16 32            [ 2] 1817 	ldw	y, (0x32, sp)
      008918 4B 21            [ 1] 1818 	push	#0x21
      00891A 4B 00            [ 1] 1819 	push	#0x00
      00891C 5F               [ 1] 1820 	clrw	x
      00891D 89               [ 2] 1821 	pushw	x
      00891E 90 89            [ 2] 1822 	pushw	y
      008920 CD 8A 2E         [ 4] 1823 	call	_memset
      008923 5B 06            [ 2] 1824 	addw	sp, #6
                                   1825 ;	se8r01.c: 617: init_io();                        // Initialize IO port
      008925 CD 84 5D         [ 4] 1826 	call	_init_io
                                   1827 ;	se8r01.c: 618: write_spi_reg(FLUSH_TX,0); // transmit -- send data 
      008928 4B 00            [ 1] 1828 	push	#0x00
      00892A 4B E1            [ 1] 1829 	push	#0xe1
      00892C CD 80 CE         [ 4] 1830 	call	_write_spi_reg
      00892F 5B 02            [ 2] 1831 	addw	sp, #2
                                   1832 ;	se8r01.c: 619: readstatus = read_spi_reg(CONFIG);
      008931 4B 00            [ 1] 1833 	push	#0x00
      008933 CD 81 0A         [ 4] 1834 	call	_read_spi_reg
      008936 5B 01            [ 2] 1835 	addw	sp, #1
                                   1836 ;	se8r01.c: 620: UARTPrintF("config = \n\r");
      008938 AE 89 C0         [ 2] 1837 	ldw	x, #___str_0+0
      00893B 88               [ 1] 1838 	push	a
      00893C 89               [ 2] 1839 	pushw	x
      00893D CD 83 0C         [ 4] 1840 	call	_UARTPrintF
      008940 5B 02            [ 2] 1841 	addw	sp, #2
      008942 84               [ 1] 1842 	pop	a
                                   1843 ;	se8r01.c: 621: print_UCHAR_hex(readstatus);
      008943 88               [ 1] 1844 	push	a
      008944 CD 83 23         [ 4] 1845 	call	_print_UCHAR_hex
      008947 84               [ 1] 1846 	pop	a
                                   1847 ;	se8r01.c: 622: readstatus = read_spi_reg(STATUS);
      008948 4B 07            [ 1] 1848 	push	#0x07
      00894A CD 81 0A         [ 4] 1849 	call	_read_spi_reg
      00894D 5B 01            [ 2] 1850 	addw	sp, #1
                                   1851 ;	se8r01.c: 623: UARTPrintF("status = \n\r");
      00894F AE 89 CC         [ 2] 1852 	ldw	x, #___str_1+0
      008952 88               [ 1] 1853 	push	a
      008953 89               [ 2] 1854 	pushw	x
      008954 CD 83 0C         [ 4] 1855 	call	_UARTPrintF
      008957 5B 02            [ 2] 1856 	addw	sp, #2
      008959 84               [ 1] 1857 	pop	a
                                   1858 ;	se8r01.c: 624: print_UCHAR_hex(readstatus);
      00895A 88               [ 1] 1859 	push	a
      00895B CD 83 23         [ 4] 1860 	call	_print_UCHAR_hex
      00895E 84               [ 1] 1861 	pop	a
                                   1862 ;	se8r01.c: 626: SE8R01_Init();
      00895F CD 87 E1         [ 4] 1863 	call	_SE8R01_Init
                                   1864 ;	se8r01.c: 630: while (1) {
      008962                       1865 00105$:
                                   1866 ;	se8r01.c: 632: tx_payload[0] = 0xf0;
      008962 1E 32            [ 2] 1867 	ldw	x, (0x32, sp)
      008964 A6 F0            [ 1] 1868 	ld	a, #0xf0
      008966 F7               [ 1] 1869 	ld	(x), a
                                   1870 ;	se8r01.c: 633: tx_payload[1] = 0x01;
      008967 1E 32            [ 2] 1871 	ldw	x, (0x32, sp)
      008969 5C               [ 2] 1872 	incw	x
      00896A A6 01            [ 1] 1873 	ld	a, #0x01
      00896C F7               [ 1] 1874 	ld	(x), a
                                   1875 ;	se8r01.c: 634: tx_payload[2] = 0x33;
      00896D 1E 32            [ 2] 1876 	ldw	x, (0x32, sp)
      00896F 5C               [ 2] 1877 	incw	x
      008970 5C               [ 2] 1878 	incw	x
      008971 A6 33            [ 1] 1879 	ld	a, #0x33
      008973 F7               [ 1] 1880 	ld	(x), a
                                   1881 ;	se8r01.c: 635: write_spi_buf(iRF_CMD_WR_TX_PLOAD, tx_payload, 32);
      008974 1E 32            [ 2] 1882 	ldw	x, (0x32, sp)
      008976 4B 20            [ 1] 1883 	push	#0x20
      008978 89               [ 2] 1884 	pushw	x
      008979 4B A0            [ 1] 1885 	push	#0xa0
      00897B CD 81 48         [ 4] 1886 	call	_write_spi_buf
      00897E 5B 04            [ 2] 1887 	addw	sp, #4
                                   1888 ;	se8r01.c: 636: write_spi_reg(WRITE_REG+STATUS, 0xff);
      008980 4B FF            [ 1] 1889 	push	#0xff
      008982 4B 27            [ 1] 1890 	push	#0x27
      008984 CD 80 CE         [ 4] 1891 	call	_write_spi_reg
      008987 5B 02            [ 2] 1892 	addw	sp, #2
                                   1893 ;	se8r01.c: 638: for (x1 = 0; x1 < 50; ++x1)
      008989 5F               [ 1] 1894 	clrw	x
      00898A 1F 30            [ 2] 1895 	ldw	(0x30, sp), x
      00898C                       1896 00114$:
      00898C 1E 30            [ 2] 1897 	ldw	x, (0x30, sp)
      00898E A3 00 32         [ 2] 1898 	cpw	x, #0x0032
      008991 2E CF            [ 1] 1899 	jrsge	00105$
                                   1900 ;	se8r01.c: 639: for (y1 = 0; y1 < 50; ++y1)
      008993 5F               [ 1] 1901 	clrw	x
      008994 1F 2E            [ 2] 1902 	ldw	(0x2e, sp), x
      008996                       1903 00111$:
      008996 1E 2E            [ 2] 1904 	ldw	x, (0x2e, sp)
      008998 A3 00 32         [ 2] 1905 	cpw	x, #0x0032
      00899B 2E 19            [ 1] 1906 	jrsge	00115$
                                   1907 ;	se8r01.c: 640: for (z1 = 0; z1 < 50; ++z1)
      00899D 5F               [ 1] 1908 	clrw	x
      00899E 1F 2C            [ 2] 1909 	ldw	(0x2c, sp), x
      0089A0                       1910 00108$:
      0089A0 1E 2C            [ 2] 1911 	ldw	x, (0x2c, sp)
      0089A2 A3 00 32         [ 2] 1912 	cpw	x, #0x0032
      0089A5 2E 08            [ 1] 1913 	jrsge	00112$
                                   1914 ;	se8r01.c: 641: __asm__("nop");
      0089A7 9D               [ 1] 1915 	nop
                                   1916 ;	se8r01.c: 640: for (z1 = 0; z1 < 50; ++z1)
      0089A8 1E 2C            [ 2] 1917 	ldw	x, (0x2c, sp)
      0089AA 5C               [ 2] 1918 	incw	x
      0089AB 1F 2C            [ 2] 1919 	ldw	(0x2c, sp), x
      0089AD 20 F1            [ 2] 1920 	jra	00108$
      0089AF                       1921 00112$:
                                   1922 ;	se8r01.c: 639: for (y1 = 0; y1 < 50; ++y1)
      0089AF 1E 2E            [ 2] 1923 	ldw	x, (0x2e, sp)
      0089B1 5C               [ 2] 1924 	incw	x
      0089B2 1F 2E            [ 2] 1925 	ldw	(0x2e, sp), x
      0089B4 20 E0            [ 2] 1926 	jra	00111$
      0089B6                       1927 00115$:
                                   1928 ;	se8r01.c: 638: for (x1 = 0; x1 < 50; ++x1)
      0089B6 1E 30            [ 2] 1929 	ldw	x, (0x30, sp)
      0089B8 5C               [ 2] 1930 	incw	x
      0089B9 1F 30            [ 2] 1931 	ldw	(0x30, sp), x
      0089BB 20 CF            [ 2] 1932 	jra	00114$
      0089BD 5B 33            [ 2] 1933 	addw	sp, #51
      0089BF 81               [ 4] 1934 	ret
                                   1935 	.area CODE
      0089C0                       1936 ___str_0:
      0089C0 63 6F 6E 66 69 67 20  1937 	.ascii "config = "
             3D 20
      0089C9 0A                    1938 	.db 0x0A
      0089CA 0D                    1939 	.db 0x0D
      0089CB 00                    1940 	.db 0x00
      0089CC                       1941 ___str_1:
      0089CC 73 74 61 74 75 73 20  1942 	.ascii "status = "
             3D 20
      0089D5 0A                    1943 	.db 0x0A
      0089D6 0D                    1944 	.db 0x0D
      0089D7 00                    1945 	.db 0x00
                                   1946 	.area INITIALIZER
      008A4D                       1947 __xinit__SE8R01_DR_2M:
      008A4D 00 00                 1948 	.dw #0x0000
      008A4F                       1949 __xinit__SE8R01_DR_1M:
      008A4F 00 00                 1950 	.dw #0x0000
      008A51                       1951 __xinit__SE8R01_DR_500K:
      008A51 00 01                 1952 	.dw #0x0001
      008A53                       1953 __xinit__pload_width_now:
      008A53 00 00                 1954 	.dw #0x0000
      008A55                       1955 __xinit__newdata:
      008A55 00 00                 1956 	.dw #0x0000
      008A57                       1957 __xinit__signal_lv:
      008A57 00                    1958 	.db #0x00	;  0
      008A58                       1959 __xinit__pip:
      008A58 00 00                 1960 	.dw #0x0000
      008A5A                       1961 __xinit__status:
      008A5A 00                    1962 	.db #0x00	; 0
      008A5B                       1963 __xinit__ADDRESS2:
      008A5B B1                    1964 	.db #0xB1	; 177
      008A5C                       1965 __xinit__ADDRESS3:
      008A5C B2                    1966 	.db #0xB2	; 178
      008A5D                       1967 __xinit__ADDRESS4:
      008A5D B3                    1968 	.db #0xB3	; 179
      008A5E                       1969 __xinit__ADDRESS5:
      008A5E B4                    1970 	.db #0xB4	; 180
      008A5F                       1971 __xinit__ADDRESS1:
      008A5F B0                    1972 	.db #0xB0	; 176
      008A60 43                    1973 	.db #0x43	; 67	'C'
      008A61 10                    1974 	.db #0x10	; 16
      008A62 10                    1975 	.db #0x10	; 16
      008A63                       1976 __xinit__ADDRESS0:
      008A63 34                    1977 	.db #0x34	; 52	'4'
      008A64 43                    1978 	.db #0x43	; 67	'C'
      008A65 10                    1979 	.db #0x10	; 16
      008A66 10                    1980 	.db #0x10	; 16
      008A67                       1981 __xinit__rx_buf:
      008A67 00                    1982 	.db #0x00	; 0
      008A68 00                    1983 	.db 0x00
      008A69 00                    1984 	.db 0x00
      008A6A 00                    1985 	.db 0x00
      008A6B 00                    1986 	.db 0x00
      008A6C 00                    1987 	.db 0x00
      008A6D 00                    1988 	.db 0x00
      008A6E 00                    1989 	.db 0x00
      008A6F 00                    1990 	.db 0x00
      008A70 00                    1991 	.db 0x00
      008A71 00                    1992 	.db 0x00
      008A72 00                    1993 	.db 0x00
      008A73 00                    1994 	.db 0x00
      008A74 00                    1995 	.db 0x00
      008A75 00                    1996 	.db 0x00
      008A76 00                    1997 	.db 0x00
      008A77 00                    1998 	.db 0x00
      008A78 00                    1999 	.db 0x00
      008A79 00                    2000 	.db 0x00
      008A7A 00                    2001 	.db 0x00
      008A7B 00                    2002 	.db 0x00
      008A7C 00                    2003 	.db 0x00
      008A7D 00                    2004 	.db 0x00
      008A7E 00                    2005 	.db 0x00
      008A7F 00                    2006 	.db 0x00
      008A80 00                    2007 	.db 0x00
      008A81 00                    2008 	.db 0x00
      008A82 00                    2009 	.db 0x00
      008A83 00                    2010 	.db 0x00
      008A84 00                    2011 	.db 0x00
      008A85 00                    2012 	.db 0x00
      008A86 00                    2013 	.db 0x00
      008A87                       2014 __xinit__tx_buf:
      008A87 00                    2015 	.db #0x00	; 0
      008A88 00                    2016 	.db 0x00
      008A89 00                    2017 	.db 0x00
      008A8A 00                    2018 	.db 0x00
      008A8B 00                    2019 	.db 0x00
      008A8C 00                    2020 	.db 0x00
      008A8D 00                    2021 	.db 0x00
      008A8E 00                    2022 	.db 0x00
      008A8F 00                    2023 	.db 0x00
      008A90 00                    2024 	.db 0x00
      008A91 00                    2025 	.db 0x00
      008A92 00                    2026 	.db 0x00
      008A93 00                    2027 	.db 0x00
      008A94 00                    2028 	.db 0x00
      008A95 00                    2029 	.db 0x00
      008A96 00                    2030 	.db 0x00
      008A97 00                    2031 	.db 0x00
      008A98 00                    2032 	.db 0x00
      008A99 00                    2033 	.db 0x00
      008A9A 00                    2034 	.db 0x00
      008A9B 00                    2035 	.db 0x00
      008A9C 00                    2036 	.db 0x00
      008A9D 00                    2037 	.db 0x00
      008A9E 00                    2038 	.db 0x00
      008A9F 00                    2039 	.db 0x00
      008AA0 00                    2040 	.db 0x00
      008AA1 00                    2041 	.db 0x00
      008AA2 00                    2042 	.db 0x00
      008AA3 00                    2043 	.db 0x00
      008AA4 00                    2044 	.db 0x00
      008AA5 00                    2045 	.db 0x00
      008AA6 00                    2046 	.db 0x00
                                   2047 	.area CABS (ABS)
